"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[12],{73062:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-60c0ccad",path:"/%D1%84%D1%83%D0%BD%D0%B4%D0%B0%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF%D1%8B-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE.html",title:"Фундаментальные принципы объектно ориентированного проектирования (Часть 1): Абстракция",lang:"ru-RU",frontmatter:{title:"Фундаментальные принципы объектно ориентированного проектирования (Часть 1): Абстракция",date:"2019-05-08",categories:["Delphi"],tags:["Delphi","совершенный-код","ооп","перевод"]},excerpt:"",headers:[{level:2,title:"Что такое Абстракция?",slug:"что-такое-абстракция",children:[]},{level:2,title:"Взаимодействие с объектами используя информацию описанную в классе",slug:"взаимодеиствие-с-объектами-используя-информацию-описанную-в-классе",children:[]},{level:2,title:"Взаимодействие с объектами через информацию описанную в классе-предке",slug:"взаимодеиствие-с-объектами-через-информацию-описанную-в-классе-предке",children:[]},{level:2,title:"Взаимодействие с объектом используя информацию описанную в виртуальном (или абстрактном) классе",slug:"взаимодеиствие-с-объектом-используя-информацию-описанную-в-виртуальном-или-абстрактном-классе",children:[]},{level:2,title:"Абстракция через интерфейсы",slug:"абстракция-через-интерфеисы",children:[]},{level:2,title:"В итоге",slug:"в-итоге",children:[]}],filePathRelative:"фундаментальные-принципы-объектно-о.md",git:{updatedTime:1692859375e3}}},54793:(n,e,s)=>{s.r(e),s.d(e,{default:()=>u});var a=s(66252),r=s(3577);const l={id:"frontmatter-title",tabindex:"-1"},i=(0,a._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),p=(0,a.Uk)("Вольный перевод статьи "),t={href:"https://schellingerhout.github.io/design%20patterns/OODesign1/",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Uk)("Fundamental Object Oriented Design principles (Part 1): Abstraction"),b=(0,a.uE)('<p>Рассмотрим принцип Абстракции используемый в объектно ориентированных языках программирования.</p><p>Это первая часть серии об объектно ориентированном проектировании. Для того чтобы понять почему изучение шаблонов проектирования важно, мы должны начать с рассмотрения того что такое хороший объектно ориентированный дизайн приложения.</p><p>ОО-языки предоставляют уникальные возможности, которые содействуют хорошему дизайну приложения. Рассматриваемые принципы проектирования могут быть применены и для не объектно ориентированных языков, но с большими сложностями.</p><p>Эта статья предполагает что вы знакомы как минимум с одним ОО языком программирования. C++, Delphi, C# и Java являются примерами объектно ориентированных языков. Настоящий ОО язык программирования имеет классы, объекты и очень часто интерфейсы.</p><h2 id="что-такое-абстракция" tabindex="-1"><a class="header-anchor" href="#что-такое-абстракция" aria-hidden="true">#</a> Что такое Абстракция?</h2><p>Абстракция, в общем смысле, означает оперирование кодом и структурой данных на высоком уровне, без необходимости понимания конкретной природы структуры данных. Ниже я опишу конкретные формы абстракции лежащие в основе ООП. Большинство из них должны быть знакомы вам, но я перечислю их в явной форме для того чтобы ссылаться на них из более сложных принципов проектирования в будущих постах.</p><h2 id="взаимодеиствие-с-объектами-используя-информацию-описанную-в-классе" tabindex="-1"><a class="header-anchor" href="#взаимодеиствие-с-объектами-используя-информацию-описанную-в-классе" aria-hidden="true">#</a> Взаимодействие с объектами используя информацию описанную в классе</h2><p>Объектно ориентированные языки программирования содержат концепцию классов. Класс — это определение, которое используется для создания объектов. Мы можем оперировать объектом через свойства и методы объявленные в классе, без понимания их действительной реализации. Также мы можем ожидать одинакового поведения от объектов одного и того же класса.</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>var\n  LCircle: TCircle;\n  LArea: double;\nbegin\n  LCircle := TCircle.Create; // Мы берём класс TCircle и создаём на основе него объект\n\n  // Мы можем устанавливать свойства в то время как объект будет сам обрабатывать побочные эффекты\n  LCircle.Radius := 3; \n\n  // Мы можем вызывать высокоуровневые методы объекта\n  LCircle.Translate(10, 15);\n  LArea := LCircle.GetArea();\nend;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Пока никаких сюрпризов. Всё что нам нужно было определено в <code>TCircle</code> и мы знаем что мы можем использовать свойства и методы класса который мы использовали для создания объекта.</p><h2 id="взаимодеиствие-с-объектами-через-информацию-описанную-в-классе-предке" tabindex="-1"><a class="header-anchor" href="#взаимодеиствие-с-объектами-через-информацию-описанную-в-классе-предке" aria-hidden="true">#</a> Взаимодействие с объектами через информацию описанную в классе-предке</h2><p>Объектно ориентированные языки программирования позволяют наследовать классы. При правильно ОО проектировании классы потомки к предкам находятся в отношении &quot;является&quot;. Для примера мы можем наследовать классы <code>TLine</code> и <code>TArc</code> от класса <code>TCurve</code>. В этом примере предполагаем, что TCurve определяет тип линии (<code>LineType</code>).</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>procedure SetLinetype(ACurveList: TList&lt;TCurve&gt;; ALineType: Linetype_Enum); // Linetype_Enum не определено в этом посте\nvar\n  LCurve: TCurve;\nbegin\n  for LCurve in ACurveList do\n    LCurve.LineType := ALineType;\nend;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>В этом примере мы не беспокоимся о том содержит ли список линии (<code>TLine</code>) или дуги (<code>TArc</code>) или другие неизвестные типы. Нас волнует только чтобы объекты были типа <code>TCurve</code> (или его наследники). Но нам не нужно знать действительно ли <code>TCurve</code> сейчас является <code>TArc</code> или <code>TLine</code>.</p><h2 id="взаимодеиствие-с-объектом-используя-информацию-описанную-в-виртуальном-или-абстрактном-классе" tabindex="-1"><a class="header-anchor" href="#взаимодеиствие-с-объектом-используя-информацию-описанную-в-виртуальном-или-абстрактном-классе" aria-hidden="true">#</a> Взаимодействие с объектом используя информацию описанную в виртуальном (или абстрактном) классе</h2><p>Рассматривая класс <code>TCurve</code> мы можем представить что он может быть абстракцией любого количества типов, не только <code>TArc</code> и <code>TLine</code>. Например, у нас может класс <code>TSpline</code> или <code>TElipseArc</code> которые тоже относятся через отношение &quot;является&quot; классу <code>TCurve</code> как к предку. Если подумать о геометрической кривой в общем виде мы можем представить методы и свойства которые могут быть абстрагированы. Например, мы можем сказать &quot;кривая может иметь только одну точку начала и одну точку окончания&quot;, так что мы можем объявить функцию которая возвращает начальную точку и конечную точку.</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>type\n\n  TCurve = class\n  public\n    function GetStartPoint: TPoint; virtual; abstract;   // TPoint не определён в этом посте\n  end;\n\n  TArc = class(TCurve)\n  public\n    function GetStartPoint: TPoint; override; \n  end;\n\n  TLine = class(TCurve)\n  public\n    function GetStartPoint: TPoint; override;\n  end;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Ключевое слово <strong>virtual</strong> в Delphi означает, что даже если мы вызовем этот метод в родительском типе (<code>TCurve</code>), то будет использоваться реализация наиболее специфичного класса (<code>TArc</code> или <code>TLine</code>). Потомки могут заменить реализацию на свою собственную. Мы рассмотрим это более подробно в концепции Полиморфизма в 3 части.</p><p>Для понимания давайте рассмотрим следующее</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>var\n  LCurve1, LCurve2, LCurve3: TCurve; // Все переменные объявлены с типом родителя\n  LStartPoint1, LStartPoint1, LStartPoint3: TPoint;  // TPoint не опредлён в этом посте\nbegin\n  LCurve1 := nil;\n  LCurve2 := nil;\n  LCurve3 := nil;\n\n  try\n    LCurve1 := TArc.Create;  // Создаются объекты типов потомков, но присваиваются переменной с типом предка\n    LCurve2 := TLine.Create;\n    LCurve3 := TCurve.Create; // Допустимая инструкция, так как класс не помечен как абстрактный, абстрактный только отдельный метод\n\n    LStartPoint1 := LCurve1.GetStartPoint; // Будет вызван TArc.GetStartPoint\n    LStartPoint1 := LCurve2.GetStartPoint; // Будет вызван TLine.GetStartPoint\n    // LStartPoint3 := LCurve3.GetStartPoint; // Будет вызван an abstract error\n  finally\n    LCurve3.Free;\n    LCurve2.Free;\n    LCurve1.Free;\n end;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>При объявлении <code>GetStartPoint</code> в классе <code>TArc</code> мы использовали директиву <strong>override</strong>. Если затем мы ссылаемся на объект через переменную типа <code>TCurve</code> и вызываем <code>GetStartPoint</code> то будет вызван <code>TArc.GetStartPoint</code>. Ключевое слово <strong>abstract</strong> в Delphi означает что если мы вызовем <code>GetStartPoint</code> у потомка который не предоставляет реализацию то мы получим &quot;Abstract Error&quot;, эта ошибка означает что метод не был переопределён в потомках. Если мы уберём ключевое слово <strong>abstract</strong> то нам нужно обязательно добавить базовую реализацию на уровне класса <code>TCurve</code>. Если потомки не реализуют этот метод то будет вызываться базовая реализация без появления исключения.</p><p>Другой уровень абстракции - сделать весь класс абстрактным. Имеет смысл делать класс абстрактным если он настолько высоко в иерархии, что нет смысла создавать объекты этого класса. В данный момент проверки компилятара при создании объектов такого класса нет, но она может появится в будущих версиях.</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>TCurve = class abstract\npublic\n   function GetStartPoint: TPoint; virtual; abstract;\nend;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="абстракция-через-интерфеисы" tabindex="-1"><a class="header-anchor" href="#абстракция-через-интерфеисы" aria-hidden="true">#</a> Абстракция через интерфейсы</h2><p>Существует заблуждение что интерфейсы это просто абстрактные классы. В случае классов между классом-потомком и классом-предком (включая абстрактные классы) существует отношение &quot;является&quot;. Наиболее распространённое отношение между классом и интерфейсом — &quot;поддерживает&quot;. Интерфейс может рассматриваться как контракт. Если класс поддерживает интерфейс, то класс берет на себя обязательство выполнить требования интерфейса, или делегировать их. Подробнее про делегирования интерфейсов будет в следующих статьях.</p><p>Интерфейсы даже более абстрактны чем абстрактные классы: один интерфейс может быть применён для нескольких иерархий классов одновременно. Можно даже создать свою иерархию наследования интерфейсов независящую от иерархии наследования классов к которым эти интерфейсы применяются. По сравнению с интерфейсами иерархии классов содержат структуры и функции которые трудно менять.</p><p>Рассмотрим пример который показывает отличия интерфейса от абстрактного класса.</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>  IComparable = interface(IInterface)\n    function CompareTo(AObject: TObject): Integer;\n  end;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Очевидно что эта сущность не может войти не в одну конкретную иерархию классов. Этот интерфейс может быть применён к любому классу который потенциально можно сравнивать с другим классом. Фактически интерфейс <code>IComparable</code> должен применяется ко многим иерархиям классов. Применённый к классу интерфейс заставляет реализовать метод в классе. Мы же ссылаемся на этот метод на высоком уровне абстракции интерфейса. Ниже пример процедуры которая сортирует любой список объектов которые поддерживают интерфейс <code>IComparable</code>.</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>procedure SortComparableList(AList: TList&lt;IComparable&gt;);\n    procedure QuickSort(ALeftIdx, ARightIdx: Integer);\n    var\n      i, j : Integer;\n      LPivotItem: TObject;\n      LTempItem: IComparable;\n    begin\n      repeat\n        i := ALeftIdx;\n        j := ARightIdx;\n\n        LPivotItem := TObject(AList[(ALeftIdx + ARightIdx) shr 1]);\n\n        repeat\n          while AList[i].CompareTo(LPivotItem) &lt; 0 do\n            Inc(i);\n          while AList[j].CompareTo(LPivotItem) &gt; 0 do\n            Dec(j);\n          if i &lt;= j then\n          begin\n            if (i &lt;&gt; j) then\n            begin\n              LTempItem := Items[i];\n              Items[i] := Items[j];\n              Items[j] := LTempItem;\n            end;\n            Inc(i);\n            Dec(j);\n          end;\n        until i &gt; j;\n        if ALeftIdx &lt; j then\n          QuickSort(ALeftIdx, j);\n        ALeftIdx := i;\n      until i &gt;= ARightIdx;\n    end;\n\nbegin\n  if AList.Count &gt; 1 then\n    QuickSort( 0, AList.Count - 1);\nend;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="в-итоге" tabindex="-1"><a class="header-anchor" href="#в-итоге" aria-hidden="true">#</a> В итоге</h2><p>Абстракция позволяет нам фокусироваться только на той области кода которая важна для нас. Она позволяет нам обобщать функциональность повышая читаемость и упрощая повторное использование кода. Также она упрощает понимание того что происходит в программе на высоком уровне.</p>',32),u={render:function(n,e){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("h1",l,[i,(0,a.Uk)(" "+(0,r.zw)(n.$frontmatter.title),1)]),(0,a._)("p",null,[p,(0,a._)("a",t,[c,(0,a.Wm)(s)])]),b],64)}}}}]);