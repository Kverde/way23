"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[6349],{13452:(e,s,n)=>{n.r(s),n.d(s,{data:()=>a});const a={key:"v-566006e8",path:"/linux-stdin-stdout-stderr.html",title:"Стандартный потоки Linux: stdin, stdout, stderr",lang:"ru-RU",frontmatter:{title:"Стандартный потоки Linux: stdin, stdout, stderr",date:"2023-11-02",categories:["Linux"],tags:["stdin","stdout","stderr"]},excerpt:"",headers:[],filePathRelative:"linux-stdin-stdout-stderr.md",git:{updatedTime:1703089593e3}}},40936:(e,s,n)=>{n.r(s),n.d(s,{default:()=>i});var a=n(66252),t=n(3577);const l={id:"frontmatter-title",tabindex:"-1"},r=(0,a._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),c=(0,a.uE)('<p>Чтобы программы можно было использовать вместе необходим способ передачи данных из одной программы в другую. В Linux такой механизм реализован через стандартные потоки, всего их три:</p><ul><li><code>stdin</code> — стандартный ввод</li><li><code>stdout</code> — стандартный вывод</li><li><code>stderr</code> — стандартный вывод ошибок</li></ul><p>Большинство программ умеют принимать данные через <code>stdin</code> и возвращать данные через <code>stdout</code>. Для примера, запустим следующий скрипт на Python в консоли:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>print(&#39;Стандартный вывод&#39;)\nraise Exception(&#39;Стандартный поток ошибок&#39;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>python3 script.py\nСтандартный вывод\nTraceback (most recent call last):\n  File &quot;/home/user/test/script.py&quot;, line 2, in &lt;module&gt;\n    raise Exception(&#39;Стандартный поток ошибок&#39;)\nException: Стандартный поток ошибок\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Такой результат получается из-за того, что консоль при запуске программы выводит все что программа передает в <code>stdout</code> и в <code>stderr</code>. Для переправления <code>stdout</code> в файл используется команда <code>&gt;</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>python3 script.py &gt; log.txt\nTraceback (most recent call last):\n  File &quot;/home/user/test/script.py&quot;, line 2, in &lt;module&gt;\n    raise Exception(&#39;Стандартный поток ошибок&#39;)\nException: Стандартный поток ошибок\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>cat log.txt\nСтандартный вывод\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Для перенаправления патока ошибок аналогичная команда <code>2&gt;</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>python3 script.py 2&gt; err.txt\nСтандартный вывод\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>cat err.txt \nTraceback (most recent call last):\n  File &quot;/home/user/test/script.py&quot;, line 2, in &lt;module&gt;\n    raise Exception(&#39;Стандартный поток ошибок&#39;)\nException: Стандартный поток ошибок\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Цифра 2 означает номер потока, все три потока имеют номера: <code>stdin</code> — 0, <code>stdout</code> — 1, <code>stderr</code> — 2. Поэтому для перенаправления потока вывода можно так же написать <code>1&gt;</code>. Команды <code>1&gt;</code> и <code>2&gt;</code> переписывают файл, если же нужно только дописывать в файл, то используются следующие команды: <code>1&gt;&gt;</code> и <code>2&gt;&gt;</code>. Если нужно перенаправить оба потока в файл, то используется команда <code>&amp;&gt;</code>.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>python3 script.py &amp;&gt; log.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>cat log.txt\nСтандартный вывод\nTraceback (most recent call last):\n  File &quot;/home/petro/Desktop/test/script.py&quot;, line 2, in &lt;module&gt;\n    raise Exception(&#39;Стандартный поток ошибок&#39;)\nException: Стандартный поток ошибок\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Для того чтобы на стандартный ввод программы поступили данные из файла используется команда <code>&lt;</code>.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>grep root -c &lt; /etc/passwd\n2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Все вышеперечисленные команды перенаправляют потоки в файл и из файла. Команда <code>|</code> переправляет <code>stdout</code> одной программы в <code>stdin</code> другой. С помощью этой команды можно строить цепочки программ с последовательной обработкой данных.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>cat /etc/passwd | grep user | head\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Кроме вышеуказанных перенаправлений ввода есть ещё две похожие команды управляющие потоками данных. Первая команда <code>&lt;&lt;&lt;</code> позволяет передать на стандартный поток ввода строку текста.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">cat</span> file.txt \nfile.txt\nuser@debian-server:~/test$ <span class="token function">cat</span> - file.txt <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">&quot;stdin input&quot;</span>\nstdin input\nfile.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Параметр <code>-</code> заставляет команду <code>cat</code> принимать ввод не только из файлов, но и из <code>stdin</code>.</p><p>Команда <code>&lt;&lt;</code> делает тоже самое, но позволяет передать многострочные текст.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">cat</span> - file.txt <span class="token operator">&lt;&lt;</span> EOF\n<span class="token operator">&gt;</span> first line\n<span class="token operator">&gt;</span> second line\n<span class="token operator">&gt;</span> EOF\nfirst line\nsecond line\nfile.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Вместо <code>EOF</code> можно использовать любой маркер начала и окончания ввода данных.</p>',24),i={render:function(e,s){return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("h1",l,[r,(0,a.Uk)(" "+(0,t.zw)(e.$frontmatter.title),1)]),c],64)}}}}]);