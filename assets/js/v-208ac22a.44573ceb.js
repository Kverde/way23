"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[3121],{91849:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-208ac22a",path:"/python-%D0%B0%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D1%8B%D0%B5-%D0%B1%D0%B0%D0%B7%D0%BE%D0%B2%D1%8B%D0%B5-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B.html",title:"Python. Абстрактные базовые классы",lang:"ru-RU",frontmatter:{title:"Python. Абстрактные базовые классы",date:"2019-10-30",categories:["Python"],tags:["ооп","intermediate-python"]},excerpt:"",headers:[],filePathRelative:"python-абстрактные-базовые-классы.md",git:{updatedTime:1692859375e3}}},38790:(n,s,a)=>{a.r(s),a.d(s,{default:()=>D});var p=a(66252),t=a(3577);const e={id:"frontmatter-title",tabindex:"-1"},o=(0,p._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),c=(0,p.Uk)("Перевод параграфа 6.7 Abstract Base Classes из книги "),l={href:"https://leanpub.com/intermediatepython",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("Intermediate Python"),u=(0,p.Uk)("."),i=(0,p._)("p",null,"Чтобы классы реализовывали заданный набор методов в статически типизированных языках, таких как Java, используются интерфейсы и абстрактные классы.",-1),k=(0,p._)("p",null,[(0,p.Uk)("Простая реализация такого контракта в Python — добавить в базовый класс методы по умолчанию, выбрасывающие исключение "),(0,p._)("code",null,"NotImplementedError"),(0,p.Uk)(". Такое решение неполное: наследники могут не переопределить все методы базового класса, а проблема обнаружится только во время выполнения программы.")],-1),b=(0,p.Uk)("Рассмотрим другую ситуацию — использование одного объекта для замещения другого. "),m={href:"https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D0%B5%D1%81%D1%82%D0%B8%D1%82%D0%B5%D0%BB%D1%8C_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("Заместитель"),g=(0,p.Uk)(" перехватывает все вызовы и передаёт их в скрываемый объект. Заместитель реализует все нужные методы, но проверку типа через "),y=(0,p._)("code",null,"isinstance",-1),h=(0,p.Uk)(" он не проходит, так как имеет тип отличный от замещаемого объекта."),f=(0,p.uE)('<p>В Python такие задачи решаются через абстрактные базовые классы, реализуемые модулем <code>abc</code>. Этот модуль определяет мета-класс и набор декораторов. Для определения абстрактного базового класса мы устанавливаем <code>ABCMeta</code> как мета-класс абстрактного класса и помечаем декораторами <code>@abstractmethod</code> и <code>@abstractproperty</code> методы и свойства которые должны быть реализованы в неабстрактных потомках.</p><p>Если потомки не реализуют абстрактные методы и свойства то не смогут создавать объекты:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod\n\n<span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    __meta<span class="token operator">-</span>class__ <span class="token operator">=</span> ABCMeta\n\n    <span class="token decorator annotation punctuation">@abstractmethod</span>\n\n    <span class="token keyword">def</span> <span class="token function">change_gear</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span>\n\n    <span class="token decorator annotation punctuation">@abstractmethod</span>\n    <span class="token keyword">def</span> <span class="token function">start_engine</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>Vehicle<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make\n        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model\n        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># abstract methods not implemented</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">&quot;Toyota&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Avensis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;silver&quot;</span><span class="token punctuation">)</span>\n\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>\nFile <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nTypeError<span class="token punctuation">:</span> Can&#39;t instantiate abstract <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">with</span> abstract methods change_gear<span class="token punctuation">,</span> start_engine\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Как только класс реализовал все абстрактные методы появляется возможность создавать объекты:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod\n\n<span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    __meta<span class="token operator">-</span>class__ <span class="token operator">=</span> ABCMeta\n\n    <span class="token decorator annotation punctuation">@abstractmethod</span>\n    <span class="token keyword">def</span> <span class="token function">change_gear</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span>\n\n    <span class="token decorator annotation punctuation">@abstractmethod</span>\n    <span class="token keyword">def</span> <span class="token function">start_engine</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>Vehicle<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make\n        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model\n        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color\n\n    <span class="token keyword">def</span> <span class="token function">change_gear</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Changing gear&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">start_engine</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Changing engine&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">&quot;Toyota&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Avensis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;silver&quot;</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> Vehicle<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token boolean">True</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Абстрактные классы позволяет регистрировать существующие классы как часть своей иерархии, не проводя проверок на реализацию методов и свойств. Это простое решение второй проблемы открывающей параграф. Абстрактный класс регистрирует класс заместитель и проверка <code>isinstance</code> возвращает корректное значение:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod\n\n<span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    __meta<span class="token operator">-</span>class__ <span class="token operator">=</span> ABCMeta\n\n    <span class="token decorator annotation punctuation">@abstractmethod</span>\n    <span class="token keyword">def</span> <span class="token function">change_gear</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span>\n\n    <span class="token decorator annotation punctuation">@abstractmethod</span>\n    <span class="token keyword">def</span> <span class="token function">start_engine</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make\n        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model\n        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Vehicle<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Car<span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">&quot;Toyota&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Avensis&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;silver&quot;</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> Vehicle<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token boolean">True</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Абстрактные базовые классы широко используются в библиотеке Python. Они предоставляют средство для группировки классов, например, числовых типов, которые имеют относительно плоскую иерархию. Модуль <code>collections</code> также содержит абстрактные базовые классы для различных наборов операций с множествами, последовательностями и словарями. Абстрактные базовые классы Python предоставляют возможность применять контракты между классами такие же как интерфейсы в Java.</p>',11),D={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("h1",e,[o,(0,p.Uk)(" "+(0,t.zw)(n.$frontmatter.title),1)]),(0,p._)("p",null,[c,(0,p._)("a",l,[r,(0,p.Wm)(a)]),u]),i,k,(0,p._)("p",null,[b,(0,p._)("a",m,[d,(0,p.Wm)(a)]),g,y,h]),f],64)}}}}]);