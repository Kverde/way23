"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[8411],{34861:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-d54af4be",path:"/db-neo4j.html",title:"Базы данных: Neo4j",lang:"ru-RU",frontmatter:{title:"Базы данных: Neo4j",date:"2025-01-03",categories:["Базы данных"],tags:["Neo4J","Графовые базы данных"]},excerpt:"",headers:[{level:2,title:"Запуск",slug:"запуск",children:[]},{level:2,title:"Neo4j Browser",slug:"neo4j-browser",children:[]},{level:2,title:"Язык запросов",slug:"язык-запросов",children:[]},{level:2,title:"Пример на Python",slug:"пример-на-python",children:[]},{level:2,title:"Ссылки",slug:"ссылки",children:[]}],filePathRelative:"db-neo4j.md",git:{updatedTime:1735934841e3}}},80962:(n,s,a)=>{a.r(s),a.d(s,{default:()=>A});var e=a(66252),p=a(3577);const t={id:"frontmatter-title",tabindex:"-1"},o=(0,e._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),r={href:"https://neo4j.com",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("Neo4j"),c=(0,e.Uk)(" — графовая база данных. В графовых базах данных объекты хранятся в виде узлов и связей между узлами. Объекты могут содержать данные, их можно представить в виде JSON объекта."),u=(0,e._)("h2",{id:"запуск",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#запуск","aria-hidden":"true"},"#"),(0,e.Uk)(" Запуск")],-1),i=(0,e.Uk)("Запустить Neo4J проще всего через "),k={href:"https://hub.docker.com/_/neo4j",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("docker"),b=(0,e.Uk)("."),m=(0,e.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker run \\\n    --name neo4j \\\n    --publish=7474:7474 --publish=7687:7687 \\\n    --volume=$HOME/neo4j/data:/data \\\n    --env=NEO4J_AUTH=none \\\n    -d \\\n    neo4j\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Порт <code>7374</code> будет работать как HTTP API, а порт <code>7687</code> для Bolt API.</p><h2 id="neo4j-browser" tabindex="-1"><a class="header-anchor" href="#neo4j-browser" aria-hidden="true">#</a> Neo4j Browser</h2><p>После запуска контейнера docker по адресу <code>http://localhost:7474/</code> будет доступен браузер.</p><h2 id="язык-запросов" tabindex="-1"><a class="header-anchor" href="#язык-запросов" aria-hidden="true">#</a> Язык запросов</h2>',5),h=(0,e.Uk)("Neo4J использует язык "),g={href:"https://neo4j.com/docs/cypher-manual/current/introduction/",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("Cypher"),y=(0,e.Uk)(" для запросов к базе данных. Cypher похож на SQL и предоставляет дополнительные возможности для выборки и изменения графов. Cypher декларативный язык которые описывает, что нужно вернуть, а не как базе данных нужно выбрать данные, это совпадает с SQL. Отличия Cypher в меньших возможностях проверки схемы данных."),f=(0,e.uE)('<p>Пример запроса на SQL и аналогичного в Cypher:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> movie<span class="token punctuation">.</span>name\n<span class="token keyword">FROM</span> movie\n<span class="token keyword">WHERE</span> movie<span class="token punctuation">.</span>rating <span class="token operator">&gt;</span> <span class="token number">7</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-cypher ext-cypher line-numbers-mode"><pre class="language-cypher"><code><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>movie<span class="token operator">:</span><span class="token class-name">Movie</span><span class="token punctuation">)</span>\n<span class="token keyword">WHERE</span> movie<span class="token punctuation">.</span>rating <span class="token operator">&gt;</span> <span class="token number">7</span>\n<span class="token keyword">RETURN</span> movie<span class="token punctuation">.</span>title\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Следующие примеры с использованием механизма сравнения шаблонов. Cypher позволяет избавится от соединений (join).</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> actors<span class="token punctuation">.</span>name\n<span class="token keyword">FROM</span> actors\n \t<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> acted_in <span class="token keyword">ON</span> acted_in<span class="token punctuation">.</span>actor_id <span class="token operator">=</span> actors<span class="token punctuation">.</span>id\n\t<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> movies <span class="token keyword">ON</span> movies<span class="token punctuation">.</span>id <span class="token operator">=</span> acted_in<span class="token punctuation">.</span>movie_id\n<span class="token keyword">WHERE</span> movies<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;The Matrix&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-cypher ext-cypher line-numbers-mode"><pre class="language-cypher"><code><span class="token keyword">MATCH</span> <span class="token punctuation">(</span>actor<span class="token operator">:</span><span class="token class-name">Actor</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">ACTED_IN</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>movie<span class="token operator">:</span><span class="token class-name">Movie</span> <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">&#39;The Matrix&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">RETURN</span> actor<span class="token punctuation">.</span>name\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="пример-на-python" tabindex="-1"><a class="header-anchor" href="#пример-на-python" aria-hidden="true">#</a> Пример на Python</h2>',7),_=(0,e.Uk)("Пример использования библиотеки "),q={href:"https://pypi.org/project/neo4j/",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("neo4j"),E=(0,e.Uk)(" ("),j={href:"https://github.com/neo4j/neo4j-python-driver",target:"_blank",rel:"noopener noreferrer"},R=(0,e.Uk)("GitHub"),U=(0,e.Uk)("):"),N=(0,e.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> neo4j <span class="token keyword">import</span> GraphDatabase<span class="token punctuation">,</span> RoutingControl\n\nURI <span class="token operator">=</span> <span class="token string">&quot;neo4j://localhost:7687&quot;</span>\n\n<span class="token keyword">def</span> <span class="token function">add_friend</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> name<span class="token punctuation">,</span> friend_name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    driver<span class="token punctuation">.</span>execute_query<span class="token punctuation">(</span>\n        <span class="token string">&quot;MERGE (a:Person {name: $name}) &quot;</span>\n        <span class="token string">&quot;MERGE (friend:Person {name: $friend_name}) &quot;</span>\n        <span class="token string">&quot;MERGE (a)-[:KNOWS]-&gt;(friend)&quot;</span><span class="token punctuation">,</span>\n        name<span class="token operator">=</span>name<span class="token punctuation">,</span> friend_name<span class="token operator">=</span>friend_name<span class="token punctuation">,</span> database_<span class="token operator">=</span><span class="token string">&quot;neo4j&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">print_friends</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    records<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _ <span class="token operator">=</span> driver<span class="token punctuation">.</span>execute_query<span class="token punctuation">(</span>\n        <span class="token string">&quot;MATCH (a:Person)-[:KNOWS]-&gt;(friend) WHERE a.name = $name &quot;</span>\n        <span class="token string">&quot;RETURN friend.name ORDER BY friend.name&quot;</span><span class="token punctuation">,</span>\n        name<span class="token operator">=</span>name<span class="token punctuation">,</span> database_<span class="token operator">=</span><span class="token string">&quot;neo4j&quot;</span><span class="token punctuation">,</span> routing_<span class="token operator">=</span>RoutingControl<span class="token punctuation">.</span>READ<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">for</span> record <span class="token keyword">in</span> records<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token string">&quot;friend.name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">with</span> GraphDatabase<span class="token punctuation">.</span>driver<span class="token punctuation">(</span>URI<span class="token punctuation">)</span> <span class="token keyword">as</span> driver<span class="token punctuation">:</span>\n    add_friend<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token string">&quot;Arthur&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Guinevere&quot;</span><span class="token punctuation">)</span>\n    add_friend<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token string">&quot;Arthur&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lancelot&quot;</span><span class="token punctuation">)</span>\n    add_friend<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token string">&quot;Arthur&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Merlin&quot;</span><span class="token punctuation">)</span>\n    print_friends<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token string">&quot;Arthur&quot;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># Guinevere</span>\n<span class="token comment"># Lancelot</span>\n<span class="token comment"># Merlin</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="ссылки" tabindex="-1"><a class="header-anchor" href="#ссылки" aria-hidden="true">#</a> Ссылки</h2>',2),x={href:"https://www.youtube.com/watch?v=8yrPi-FHZp4",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("Александр Морозов. Семантический поиск по аналитическим данным с помощью Python и Neo4j"),C={href:"https://neo4j.com/docs/",target:"_blank",rel:"noopener noreferrer"},M=(0,e.Uk)("Документация Neo4J"),A={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",t,[o,(0,e.Uk)(" "+(0,p.zw)(n.$frontmatter.title),1)]),(0,e._)("p",null,[(0,e._)("a",r,[l,(0,e.Wm)(a)]),c]),u,(0,e._)("p",null,[i,(0,e._)("a",k,[d,(0,e.Wm)(a)]),b]),m,(0,e._)("p",null,[h,(0,e._)("a",g,[v,(0,e.Wm)(a)]),y]),f,(0,e._)("p",null,[_,(0,e._)("a",q,[w,(0,e.Wm)(a)]),E,(0,e._)("a",j,[R,(0,e.Wm)(a)]),U]),N,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",x,[T,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",C,[M,(0,e.Wm)(a)])])])],64)}}}}]);