"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[8729],{90810:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-60ed8ee4",path:"/%D0%BD%D0%B0%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D0%B3%D0%BE-dsl-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80%D0%B0-%D0%BD%D0%B0-delphi-1.html",title:"Написание простого DSL компилятора на Delphi (1. Язык)",lang:"ru-RU",frontmatter:{title:"Написание простого DSL компилятора на Delphi (1. Язык)",date:"2019-06-04",categories:["Delphi"],tags:["Delphi","перевод","компиляторы"]},excerpt:"",headers:[],filePathRelative:"написание-простого-dsl-компилятора-на-delphi-1.md",git:{updatedTime:1692859375e3}}},17366:(n,s,e)=>{e.r(s),e.d(s,{default:()=>k});var a=e(66252),t=e(3577);const l={id:"frontmatter-title",tabindex:"-1"},r=(0,a._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),p=(0,a.Uk)("Перевод поста "),o={href:"https://www.thedelphigeek.com/2017/08/writing-simple-dsl-compiler-with-delphi_25.html",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("Writing a Simple DSL Compiler with Delphi (1. The Language)"),u=(0,a.Uk)("."),c=(0,a.Uk)('Эта статья представляет собой неформальное описание простого языка (далее я называю его "Язык") для которого я пишу компилятор. Если вы только начинаете читать эту серию, то я бы рекомендовал вам начать с '),b={href:"http://way23.ru/%D0%BD%D0%B0%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D0%B3%D0%BE-dsl-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80%D0%B0-%D0%BD%D0%B0-delphi-0/",target:"_blank",rel:"noopener noreferrer"},D=(0,a.Uk)("этого поста"),d=(0,a.Uk)("."),m=(0,a.uE)('<p>Давайте начнём с простого примера который вычисляет i-тое число Фибоначчи</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code> <span class="token function">fib</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token number">1</span>\n   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Код довольно прост. Первые два числа в последовательности Фибоначчи это единицы, а последующие являются суммой двух предыдущих числе в последовательности.</p><p>Следующие правила описывают язык (более или менее):</p><ul><li>Язык относится к категории C-подобных языков.</li><li>Пробелы игнорируются.</li><li>Только один тип данных — целое число (<code>integer</code>)</li><li>Только три оператора: <code>+</code>, <code>-</code>, и <code>&lt;</code>.</li><li><code>a &lt; b</code> возвращает <code>1</code> если a меньше чем <code>b</code>, и <code>0</code> в противоположном случае.</li><li>Только два оператора <strong>if</strong> и <strong>return</strong>.</li><li>Оператор <strong>if</strong> выполняет блок <strong>then</strong> если условное выражение не равно 0 и выполняет блок <strong>else</strong> в противном случае. Блок <strong>else</strong> обязателен.</li><li>Оператор <strong>return</strong> только устанавливает результат функции и не прерывает поток управления.</li><li>Нет оператора присваивания.</li><li>Каждая функция возвращает <code>integer</code>.</li><li>Параметры всегда передаются по значению.</li><li>Функции без оператора <strong>return</strong> возвращают 0.</li><li>Функции могут вызывать другие функции (или себя рекурсивно).</li></ul><p>Как вы можете видеть, Язык ужасно ограничен, но в нем достаточно функционала для простых примеров. Язык также является функциональным, в терминах computer science. Мы будем использовать это в наших интересах намного позже в этой серии.</p><p>Немного более формальное (но всё ещё очень неформальное) описание синтаксиса:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/// program = {function}\n///\n/// function = identifier &quot;(&quot; [ identifier { &quot;,&quot; identifier } ] &quot;)&quot; block\n///\n/// block = &quot;{&quot; statement {&quot;;&quot; statement} [&quot;;&quot;] &quot;}&quot;\n///\n/// statement = if\n///           | return\n///\n/// if = &quot;if&quot; expression block &quot;else&quot; block\n///\n/// return = &quot;return&quot; expression\n///\n/// expression = term\n///            | term operator term\n///\n/// term = numeric_constant\n///      | function_call\n///      | identifier\n///\n/// operator = &quot;+&quot; | &quot;-&quot; | &quot;&lt;&quot;\n///\n/// function_call = identifier &quot;(&quot; [expression { &quot;,&quot; expression } ] &quot;)&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',8),k={render:function(n,s){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("h1",l,[r,(0,a.Uk)(" "+(0,t.zw)(n.$frontmatter.title),1)]),(0,a._)("p",null,[p,(0,a._)("a",o,[i,(0,a.Wm)(e)]),u]),(0,a._)("p",null,[c,(0,a._)("a",b,[D,(0,a.Wm)(e)]),d]),m],64)}}}}]);