"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[3697],{71825:(e,r,t)=>{t.r(r),t.d(r,{data:()=>a});const a={key:"v-643b1ab8",path:"/%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0-%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA-%D0%B8-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BA%D0%BE.html",title:"Обработка ошибок и проектирование компилятора",lang:"ru-RU",frontmatter:{title:"Обработка ошибок и проектирование компилятора",date:"2020-02-12",categories:["Языки программирования"],tags:["перевод","компиляторы"]},excerpt:"",headers:[{level:2,title:"Типы источников ошибок",slug:"типы-источников-ошибок",children:[]},{level:2,title:"Типы ошибок времени компиляции",slug:"типы-ошибок-времени-компиляции",children:[]},{level:2,title:"Восстановление после ошибок",slug:"восстановление-после-ошибок",children:[]}],filePathRelative:"обработка-ошибок-и-проектирование-ко.md",git:{updatedTime:1692859375e3}}},6697:(e,r,t)=>{t.r(r),t.d(r,{default:()=>h});var a=t(66252),n=t(3577);const o={id:"frontmatter-title",tabindex:"-1"},i=(0,a._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),l=(0,a.Uk)("Перевод статьи "),d={href:"https://www.geeksforgeeks.org/error-handling-compiler-design/",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Uk)("Error Handling in Compiler Design"),c=(0,a.Uk)("."),s=(0,a.uE)('<p>Задача по обработке ошибок (Error Handling) включает в себя: обнаружение ошибок, сообщения об ошибках пользователю, создание стратегии восстановления и реализации обработки ошибок. Кроме того система обработки ошибок должна работать быстро.</p><h2 id="типы-источников-ошибок" tabindex="-1"><a class="header-anchor" href="#типы-источников-ошибок" aria-hidden="true">#</a> Типы источников ошибок</h2><p>Источники ошибок делятся на два типа: ошибки времени выполнения (run-time error) и ошибки времени компиляции (compile-time error).</p><p>Ошибки времени выполнения возникают когда программа запущена. Обычно они связаны с неверными входными данными. Примеры таких ошибок: недостаток памяти, конфликт с другим приложением, логические ошибки. Логическая ошибка означает что запуск программы не приводит к ожидаемому результату. Логические ошибки лучше всего обрабатывать тщательным тестированием и отладкой программы.</p><p>Ошибки времени компиляции возникают во время компиляции, до запуска программы. Примеры таких ошибок: синтаксическая ошибка или отсутствие файла с кодом на который есть ссылка.</p><h2 id="типы-ошибок-времени-компиляции" tabindex="-1"><a class="header-anchor" href="#типы-ошибок-времени-компиляции" aria-hidden="true">#</a> Типы ошибок времени компиляции</h2><p>Ошибки компиляции разделяются на:</p><ul><li><strong>Лексические</strong> (Lexical): включают в себя опечатки идентификаторов, ключевых слов и операторов</li><li><strong>Синтаксические</strong> (Syntactical): пропущенная точка с запятой или незакрытая скобка</li><li><strong>Семантические</strong> (Semantical): несовместимое значение при присвоении или несовпадение типов между оператором и операндом</li><li><strong>Логические</strong> (Logical): недостижимый код, бесконечный цикл</li></ul><p>Парсер, обрабатывая текст, пытается как можно раньше обнаружить ошибку. В современных средах разработки синтаксические ошибки отображаются прямо в редакторе кода, предотвращая последующий неверный ввод. Обнажение ошибки происходит когда введённый префикс не совпадает с префиксами строк верными в выбранном языке программирования. Например префикс <code>for(;)</code> может привести к сообщению об ошибке, так как обычно внутри <code>for</code> должно быть две точки с запятой.</p><h2 id="восстановление-после-ошибок" tabindex="-1"><a class="header-anchor" href="#восстановление-после-ошибок" aria-hidden="true">#</a> Восстановление после ошибок</h2><p>Базовое требование к компилятору — прервать компиляцию и выдать сообщение при появлении ошибки. Кроме этого есть несколько методов восстановления после ошибки.</p><p><strong>Panic mode recovery</strong></p><p>Это самый простой способ восстановления после ошибок и он предотвращает бесконечные циклы в компиляторе при попытках исправить ошибку. Парсер отклоняет следующие за ошибкой символы до того как будет обнаружен специальный символ (например, разделитель команд, точка с запятой). Такой подход адекватен если низкая вероятность нескольких ошибок в одной конструкции.</p><p>Пример: рассмотрим выражение с ошибкой <code>(1 + + 2) + 3</code>. При обнаружении второго <code>+</code> пропускаются все символы до следующего числа.</p><p><strong>Phase level recovery</strong></p><p>Производится локальное изменение входного потока чтобы исправить ошибку.</p><p><strong>Error productions</strong></p><p>Разработчики компиляторов знают часто встречаемые ошибки. При появлении таких ошибок могут применяться расширения грамматики для их обработки. Например: написание <code>5x</code> вместо <code>5*x</code>.</p><p><strong>Global correction</strong></p><p>Производится как можно меньше изменений чтобы преобразовать код с ошибкой в корректный код. Эту стратегию дорого реализовывать.</p>',20),h={render:function(e,r){const t=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("h1",o,[i,(0,a.Uk)(" "+(0,n.zw)(e.$frontmatter.title),1)]),(0,a._)("p",null,[l,(0,a._)("a",d,[p,(0,a.Wm)(t)]),c]),s],64)}}}}]);