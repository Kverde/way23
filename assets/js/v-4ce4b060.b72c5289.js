"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[9187],{69539:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-4ce4b060",path:"/python-%D1%81%D0%B2%D0%BE%D0%B9%D1%81%D1%82%D0%B2%D0%B0.html",title:"Python. Свойства",lang:"ru-RU",frontmatter:{title:"Python. Свойства",date:"2020-02-21",categories:["Python"],tags:["Python"]},excerpt:"",headers:[{level:2,title:"Начальный пример",slug:"начальныи-пример",children:[]},{level:2,title:"Использование геттеров и сеттеров",slug:"использование-геттеров-и-сеттеров",children:[]},{level:2,title:"Свойства",slug:"своиства",children:[]},{level:2,title:"Глубокое погружение в свойства",slug:"глубокое-погружение-в-своиства",children:[]}],filePathRelative:"python-свойства.md",git:{updatedTime:1692859375e3}}},23602:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(66252),p=a(3577);const t={id:"frontmatter-title",tabindex:"-1"},o=(0,e._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),c=(0,e.Uk)("Перевод статьи "),l={href:"https://www.programiz.com/python-programming/property",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("Python @property"),u=(0,e.Uk)("."),i=(0,e.uE)('<p>Python поддерживает концепцию свойств упрощающих объектно ориентированное программирование. Прежде чем погрузится глубже в детали свойств, рассмотрим зачем могут быть нужны свойства.</p><h2 id="начальныи-пример" tabindex="-1"><a class="header-anchor" href="#начальныи-пример" aria-hidden="true">#</a> Начальный пример</h2><p>Представим что вы решили сделать класс хранящий температуру в градусах Цельсия. Он также должен реализовывать метод для конвертации температуры в градусы Фаренгейта. Реализуем класс так:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Celsius</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperature <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature\n\n    <span class="token keyword">def</span> <span class="token function">to_fahrenheit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>temperature <span class="token operator">*</span> <span class="token number">1.8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Затем создаём объект этого класса и меняем значение температуры как пожелаем:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># создание нового объекта</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> man <span class="token operator">=</span> Celsius<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># установка температуры</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> man<span class="token punctuation">.</span>temperature <span class="token operator">=</span> <span class="token number">37</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># получение значения температуры</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> man<span class="token punctuation">.</span>temperature\n<span class="token number">37</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># конвертация в градусы Фаренгейта</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> man<span class="token punctuation">.</span>to_fahrenheit<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">98.60000000000001</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Дополнительные десятичные разряды при конвертации в градусы Фаренгейта происходят из-за арифметической ошибки с плавающей запятой (попробуйте сложить <code>1.1 + 2.2</code> в интерпретаторе).</p><p>Когда мы присваиваем или извлекаем атрибут объекта, такой как <code>temperature</code>, Python ищет его в словаре объекта <code>__dict__</code>.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> man<span class="token punctuation">.</span>__dict__\n<span class="token punctuation">{</span><span class="token string">&#39;temperature&#39;</span><span class="token punctuation">:</span> <span class="token number">37</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Внутри интерпретатора <code>man.temperature</code> становится <code>man.__dict__[&#39;temperature&#39;]</code>.</p><p>Теперь представим что наш класс стал популярным, много клиентов стали использовать его в своих программах. Однажды, важный клиент пришёл в нам и сообщил что температура не может быть ниже -273 градусов Цельсия. Затем он попросил реализовать это ограничение значения. Прислушавшись к этому предложению мы реализуем его и выпускаем новую версию нашего класса.</p><h2 id="использование-геттеров-и-сеттеров" tabindex="-1"><a class="header-anchor" href="#использование-геттеров-и-сеттеров" aria-hidden="true">#</a> Использование геттеров и сеттеров</h2><p>Очевидным решением будет скрыть атрибут <code>temperature</code> (сделать его приватным) и определить интерфейс в виде геттера и сеттера для управления полем.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Celsius</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperature <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>set_temperature<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">to_fahrenheit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_temperature<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span>\n\n    <span class="token comment"># new update</span>\n    <span class="token keyword">def</span> <span class="token function">get_temperature</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_temperature\n\n    <span class="token keyword">def</span> <span class="token function">set_temperature</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">273</span><span class="token punctuation">:</span>\n            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Temperature below -273 is not possible&quot;</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>_temperature <span class="token operator">=</span> value\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Добавлены методы <code>get_temperature()</code> и <code>set_temperature()</code>, имя поле <code>temperature</code> заменено на <code>_temperature</code>. Подчёркивание в начале имени используется для обозначения приватных переменных в Python.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Celsius<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">277</span><span class="token punctuation">)</span>\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nValueError<span class="token punctuation">:</span> Temperature below <span class="token operator">-</span><span class="token number">273</span> <span class="token keyword">is</span> <span class="token keyword">not</span> possible\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Celsius<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>get_temperature<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">37</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>set_temperature<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>set_temperature<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">)</span>\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nValueError<span class="token punctuation">:</span> Temperature below <span class="token operator">-</span><span class="token number">273</span> <span class="token keyword">is</span> <span class="token keyword">not</span> possible\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Изменения успешно реализуют новые ограничения. Мы больше не можем установить температуру ниже -273.</p><p>В языке Python нет приватных переменных. Существуют нормы которым придерживаются разработчики, но язык сам не применяет ограничения.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>_temperature <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">300</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>get_temperature<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">-</span><span class="token number">300</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Но это не является большой проблемой. Гораздо хуже то что все клиенты использующие предыдущую версию класса должны изменить свой код с <code>obj.temperature</code> на <code>obj.get_temperature()</code> и все присвоения <code>obj.temperature = val</code> на <code>obj.set_temperature(val)</code>. Наше обновление не поддерживает обратную совместимость. Свойства помогают решить эту проблему.</p><h2 id="своиства" tabindex="-1"><a class="header-anchor" href="#своиства" aria-hidden="true">#</a> Свойства</h2><p>Добавление ограничений в класс в стиле Python:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Celsius</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperature <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature\n\n    <span class="token keyword">def</span> <span class="token function">to_fahrenheit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>temperature <span class="token operator">*</span> <span class="token number">1.8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span>\n\n    <span class="token keyword">def</span> <span class="token function">get_temperature</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Getting value&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_temperature\n\n    <span class="token keyword">def</span> <span class="token function">set_temperature</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">273</span><span class="token punctuation">:</span>\n            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Temperature below -273 is not possible&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Setting value&quot;</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>_temperature <span class="token operator">=</span> value\n\n    temperature <span class="token operator">=</span> <span class="token builtin">property</span><span class="token punctuation">(</span>get_temperature<span class="token punctuation">,</span>set_temperature<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Мы добавили функции <code>print()</code> внутрь <code>get_temperature()</code> и <code>set_temperature()</code> чтобы ясно видеть когда они запускаются.</p><p>Последняя строка кода создаёт объект свойства <code>temperature</code>. Свойство присоединяет некоторый код (<code>get_temperature</code> и <code>set_temperature</code>) к атрибутту класса (<code>temperature</code>).</p><p>Код извлекающий значение из <code>temperature</code> автоматически вызывает <code>get_temperature()</code> вместо поиска по словарю (<code>__dict__</code>). Таким же образом, код присваивающий значение <code>temperature</code> автоматически вызовет <code>set_temperature()</code>.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Celsius<span class="token punctuation">(</span><span class="token punctuation">)</span>\nSetting value\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>После создания объекта появляется сообщение из метода <code>set_temperature()</code>. Это происходит потому что при создании объекта вызывается метод <code>__init__()</code>, а в нём приходит присвоение <code>self.temperature = temperature</code>. Присвоение автоматически вызывает <code>set_temperature()</code>.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>temperature\nGetting value\n<span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Любой запрос к полю, такой как <code>c.temperature</code> автоматически вызывает <code>get_temperature()</code>. Ещё несколько примеров:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>temperature <span class="token operator">=</span> <span class="token number">37</span>\nSetting value\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>to_fahrenheit<span class="token punctuation">(</span><span class="token punctuation">)</span>\nGetting value\n<span class="token number">98.60000000000001</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>При использовании свойств мы изменяем класс и реализуем ограничения значения без изменений в клиентском коде. Наша реализация обладает обратной совместимостью.</p><p>Обратите внимание, что значение температуры хранится в приватной переменной <code>_temperature</code>. Атрибут <code>temperature</code> является объектом свойства который предоставляет интерфейс доступа к этой приватной переменной.</p><h2 id="глубокое-погружение-в-своиства" tabindex="-1"><a class="header-anchor" href="#глубокое-погружение-в-своиства" aria-hidden="true">#</a> Глубокое погружение в свойства</h2><p>В Python, <code>property()</code> это встроенная функция с сигнатурой</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">property</span><span class="token punctuation">(</span>fget<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fset<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fdel<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>fget - функция для получения значения атрибута</li><li>fset - функция для установки значения атрибута</li><li>fdel - функция для удаления атрибута</li><li>doc - строка с комментарием</li></ul><p>Все аргументы не обязательны, объект свойства может быть создан так:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">property</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;</span><span class="token builtin">property</span> <span class="token builtin">object</span> at <span class="token number">0x0000000003239B38</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Объект свойства имеет три метода: <code>getter()</code>, <code>setter()</code> и <code>deleter()</code> для указания <code>fget</code>, <code>fset</code> и <code>fdel</code> после создания объекта. Это означает что строка</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>temperature <span class="token operator">=</span> <span class="token builtin">property</span><span class="token punctuation">(</span>get_temperature<span class="token punctuation">,</span> set_temperature<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>эквивалентна коду</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># make empty property</span>\ntemperature <span class="token operator">=</span> <span class="token builtin">property</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment"># assign fget</span>\ntemperature <span class="token operator">=</span> temperature<span class="token punctuation">.</span>getter<span class="token punctuation">(</span>get_temperature<span class="token punctuation">)</span>\n<span class="token comment"># assign fset</span>\ntemperature <span class="token operator">=</span> temperature<span class="token punctuation">.</span>setter<span class="token punctuation">(</span>set_temperature<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Используя декоратор мы можем избежать создания лишних имён <code>get_temperature</code> и <code>set_temperature</code>.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Celsius</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperature <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>_temperature <span class="token operator">=</span> temperature\n\n    <span class="token keyword">def</span> <span class="token function">to_fahrenheit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>temperature <span class="token operator">*</span> <span class="token number">1.8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span>\n\n    <span class="token decorator annotation punctuation">@property</span>\n    <span class="token keyword">def</span> <span class="token function">temperature</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Getting value&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_temperature\n\n    <span class="token decorator annotation punctuation">@temperature<span class="token punctuation">.</span>setter</span>\n    <span class="token keyword">def</span> <span class="token function">temperature</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">273</span><span class="token punctuation">:</span>\n            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Temperature below -273 is not possible&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Setting value&quot;</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>_temperature <span class="token operator">=</span> value\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Использования декоратора простой и рекомендуемый способ создания свойств.</p>',46),k={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",t,[o,(0,e.Uk)(" "+(0,p.zw)(n.$frontmatter.title),1)]),(0,e._)("p",null,[c,(0,e._)("a",l,[r,(0,e.Wm)(a)]),u]),i],64)}}}}]);