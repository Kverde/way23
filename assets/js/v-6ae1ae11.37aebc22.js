"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[6680],{62153:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-6ae1ae11",path:"/%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-pythagorean-triplet.html",title:"Задача Pythagorean Triplet",lang:"ru-RU",frontmatter:{title:"Задача Pythagorean Triplet",date:"2020-02-06",categories:["Python","Алгоритмы"],tags:["математика","Алгоритмы"]},excerpt:"",headers:[{level:2,title:"Условие",slug:"условие",children:[]},{level:2,title:"Решение",slug:"решение",children:[]}],filePathRelative:"задача-pythagorean-triplet.md",git:{updatedTime:1692859375e3}}},34373:(a,n,s)=>{s.r(n),s.d(n,{default:()=>o});var e=s(66252),t=s(3577);const p={id:"frontmatter-title",tabindex:"-1"},l=(0,e._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),r=(0,e.uE)('<h2 id="условие" tabindex="-1"><a class="header-anchor" href="#условие" aria-hidden="true">#</a> Условие</h2><p>Дано число [latex]N[/latex]. Найти все пифагоровы тройки такие что [latex]a + b + c = N[/latex]. Пифагоровы тройки удовлетворяют условиям [latex]a^2 + b^2 = c^2[/latex] и [latex]a \\lt b \\lt c[/latex].</p><h2 id="решение" tabindex="-1"><a class="header-anchor" href="#решение" aria-hidden="true">#</a> Решение</h2><p>Простейшее решение перебором даёт сложность [latex]O(n^2)[/latex]:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>for a in range(n):\n  for b in range(a + 1, n):\n    c = N - a - b\n    if is_triplet(a, b, c):\n      add_result(a, b, c)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Оптимизации на сокращение перебора в случае когда он дальше не имеет смысла не влияют на порядок роста.</p><p>Эту же задачу можно решить за [latex]O(n)[/latex]. Из условий задачи следуют два уравнения:</p><ul><li>[latex]a + b + c = N[/latex]</li><li>[latex]a^2 + b^2 = c^2[/latex]</li></ul><p>[latex]N[/latex] является константой. Примем так же за константу [latex]a[/latex]. Остаётся система из двух уравнений с двумя неизвестными. Последовательно решаем её.</p><ul><li>[latex]c = N - a - b[/latex] (1)</li><li>[latex]c^2 - b^2 = a^2[/latex]</li><li>[latex](c - b)(c + b) = a^2[/latex] (2)</li><li>[latex](n - a - b - b)(n - a - b + b) = a^2[/latex] (подставляем 1 в 2)</li><li>[latex](n - a - 2b)(n - a) = a^2[/latex]</li><li>[latex]n^2 - an - 2nb - an + a^2 + 2ab = a^2[/latex]</li><li>[latex]n^2 - 2an - 2nb + 2ab = 0[/latex]</li><li>[latex](2a - 2n)b = 2an - n^2[/latex]</li><li>[latex]b = \\frac{2an - n^2}{2a - 2n}[/latex]</li><li>[latex]c = N - a - b[/latex]</li></ul><p>Используя формулы для вычисления [latex]b[/latex] и [latex]c[/latex] в цикле по [latex]a[/latex] находим все пифагоровы тройки.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">triplets_with_sum</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    n <span class="token operator">=</span> number\n    <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">*</span> n <span class="token operator">-</span> n <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>\n        c <span class="token operator">=</span> n <span class="token operator">-</span> b <span class="token operator">-</span> a\n\n        <span class="token keyword">if</span> <span class="token builtin">round</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> b <span class="token keyword">and</span> a <span class="token operator">&lt;</span> b <span class="token operator">&lt;</span> c<span class="token punctuation">:</span>\n            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> res\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',12),o={render:function(a,n){return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",p,[l,(0,e.Uk)(" "+(0,t.zw)(a.$frontmatter.title),1)]),r],64)}}}}]);