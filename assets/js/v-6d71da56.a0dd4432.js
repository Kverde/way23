"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[7788],{84386:(a,n,s)=>{s.r(n),s.d(n,{data:()=>p});const p={key:"v-6d71da56",path:"/%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D1%85-%D1%87%D0%B8%D1%81%D0%B5%D0%BB-%D0%BD%D0%B0-oracle.html",title:"Вывод простых чисел на Oracle",lang:"ru-RU",frontmatter:{title:"Вывод простых чисел на Oracle",date:"2020-04-17",categories:["Базы данных"],tags:["sql","oracle"]},excerpt:"",headers:[{level:2,title:"Решение",slug:"решение",children:[]}],filePathRelative:"вывод-простых-чисел-на-oracle.md",git:{updatedTime:1692859375e3}}},58301:(a,n,s)=>{s.r(n),s.d(n,{default:()=>i});var p=s(66252),e=s(3577);const l={id:"frontmatter-title",tabindex:"-1"},m=(0,p._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),r=(0,p.Uk)("Задача с "),c={href:"https://www.hackerrank.com/challenges/print-prime-numbers/problem",target:"_blank",rel:"noopener noreferrer"},t=(0,p.Uk)("Hackerrank"),o=(0,p.Uk)(":"),b=(0,p.uE)('<blockquote><p>Напишите запрос выводящий простые числа меньшие или равные 1000.</p></blockquote><p>Пример вывода постых чисел меньших или равных 10:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>2&amp;3&amp;5&amp;7\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="решение" tabindex="-1"><a class="header-anchor" href="#решение" aria-hidden="true">#</a> Решение</h2><p>Разложим задачу на подзадачи:</p><ol><li>Вывести список чисел от 2 до 1000</li><li>Отфильтровать из списка только простые числа</li><li>Объединить результат в одну строку</li></ol><p>Для вывода списка чисел воспользуемся <code>connect by</code></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> \n  <span class="token keyword">level</span> <span class="token operator">+</span> <span class="token number">1</span> n \n<span class="token keyword">from</span> \n  dual \n<span class="token keyword">connect</span> <span class="token keyword">by</span> \n  <span class="token keyword">level</span> <span class="token operator">&lt;=</span> <span class="token number">999</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>В результате появляется список строк с числами от 2 до 1000. Теперь нужно оставить только простые числа. Простые числа делятся только на единицу и на самих себя. Проверим это с помощью подзапроса. Так как в подзапросе понадобится тот же список чисел то вынесем его в <code>with</code>:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">with</span> nums <span class="token keyword">as</span>\n<span class="token punctuation">(</span><span class="token keyword">select</span> \n  <span class="token keyword">level</span> <span class="token operator">+</span> <span class="token number">1</span> n \n<span class="token keyword">from</span> \n  dual \n<span class="token keyword">connect</span> <span class="token keyword">by</span> \n  <span class="token keyword">level</span> <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">)</span>\n\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> nums\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>И добавим подзапрос:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">with</span> nums <span class="token keyword">as</span>\n<span class="token punctuation">(</span><span class="token keyword">select</span> \n  <span class="token keyword">level</span> <span class="token operator">+</span> <span class="token number">1</span> n \n<span class="token keyword">from</span> \n  dual \n<span class="token keyword">connect</span> <span class="token keyword">by</span> \n  <span class="token keyword">level</span> <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">)</span>\n\n<span class="token keyword">select</span> \n  <span class="token operator">*</span> \n<span class="token keyword">from</span> \n  nums n1\n<span class="token keyword">where</span> \n  <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> \n                <span class="token operator">*</span> \n              <span class="token keyword">from</span> \n                nums n2 \n              <span class="token keyword">where</span> \n                n2<span class="token punctuation">.</span>n <span class="token operator">&lt;&gt;</span> n1<span class="token punctuation">.</span>n \n                <span class="token operator">and</span> <span class="token function">mod</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span>n<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>\n              <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>Теперь осталось только соединить строки в одну. Для этого воспользуемся функцией <code>listagg</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>with nums as\n(select \n  level + 1 n \nfrom \n  dual \nconnect by \n  level &lt;= 999)\n\nselect \n  listagg(n, &#39;&amp;&#39;) within group (order by n) n \nfrom \n  nums n1\nwhere \n  not exists (select \n                * \n              from \n                nums n2 \n              where \n                n2.n &lt;&gt; n1.n \n                and mod(n1.n, n2.n) = 0\n              )\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>В результате получаем:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>2&amp;3&amp;5&amp;7&amp;11&amp;13&amp;17&amp;19&amp;23&amp;29&amp;31&amp;37&amp;41&amp;43&amp;47&amp;53&amp;59&amp;61&amp;67&amp;71&amp;73&amp;79&amp;83&amp;89&amp;97&amp;101&amp;103&amp;107&amp;109&amp;113&amp;127&amp;131&amp;137&amp;139&amp;149&amp;151&amp;157&amp;163&amp;167&amp;173&amp;179&amp;181&amp;191&amp;193&amp;197&amp;199&amp;211&amp;223&amp;227&amp;229&amp;233&amp;239&amp;241&amp;251&amp;257&amp;263&amp;269&amp;271&amp;277&amp;281&amp;283&amp;293&amp;307&amp;311&amp;313&amp;317&amp;331&amp;337&amp;347&amp;349&amp;353&amp;359&amp;367&amp;373&amp;379&amp;383&amp;389&amp;397&amp;401&amp;409&amp;419&amp;421&amp;431&amp;433&amp;439&amp;443&amp;449&amp;457&amp;461&amp;463&amp;467&amp;479&amp;487&amp;491&amp;499&amp;503&amp;509&amp;521&amp;523&amp;541&amp;547&amp;557&amp;563&amp;569&amp;571&amp;577&amp;587&amp;593&amp;599&amp;601&amp;607&amp;613&amp;617&amp;619&amp;631&amp;641&amp;643&amp;647&amp;653&amp;659&amp;661&amp;673&amp;677&amp;683&amp;691&amp;701&amp;709&amp;719&amp;727&amp;733&amp;739&amp;743&amp;751&amp;757&amp;761&amp;769&amp;773&amp;787&amp;797&amp;809&amp;811&amp;821&amp;823&amp;827&amp;829&amp;839&amp;853&amp;857&amp;859&amp;863&amp;877&amp;881&amp;883&amp;887&amp;907&amp;911&amp;919&amp;929&amp;937&amp;941&amp;947&amp;953&amp;967&amp;971&amp;977&amp;983&amp;991&amp;997\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',16),i={render:function(a,n){const s=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("h1",l,[m,(0,p.Uk)(" "+(0,e.zw)(a.$frontmatter.title),1)]),(0,p._)("p",null,[r,(0,p._)("a",c,[t,(0,p.Wm)(s)]),o]),b],64)}}}}]);