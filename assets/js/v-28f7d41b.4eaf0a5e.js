"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[9363],{61843:(e,t,r)=>{r.r(t),r.d(t,{data:()=>n});const n={key:"v-28f7d41b",path:"/%D0%B3%D1%80%D1%83%D0%BF%D0%BF%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0-%D0%B8-%D0%BF%D0%BE%D0%B4%D1%81%D1%87%D1%91%D1%82-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2-%D0%B2-%D1%81%D0%BF%D0%B8.html",title:"Группировка и подсчёт элементов в списке Python",lang:"ru-RU",frontmatter:{title:"Группировка и подсчёт элементов в списке Python",date:"2017-09-18",categories:["Алгоритмы"],tags:["Python"]},excerpt:"",headers:[{level:3,title:"Полный код примера",slug:"полныи-код-примера",children:[]},{level:3,title:"Ссылки",slug:"ссылки",children:[]}],filePathRelative:"группировка-и-подсчёт-элементов-в-спи.md",git:{updatedTime:1692859375e3}}},84688:(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r(66252),o=r(3577);const a={id:"frontmatter-title",tabindex:"-1"},i=(0,n._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),c=(0,n.uE)('<p>Рассмотрим задачу</p><blockquote><p>Дана строка с текстом, подсчитать количество появления разных букв в тексте.</p></blockquote><p>Для хранения количества букв будем использовать словарь. Рассмотрим самый простой вариант подсчёта. Пройтись по всем буквам, если текущей буквы ещё нет в словаре, то это первое вхождение - устанавливаем кол-во равным одному, если буква уже есть то увеличиваем кол-во на 1.</p><p>def countChar1(text): res = {} for c in text: if c not in res: res[c] = 0 res[c] += 1 for key, value in res.items(): print(key, value)</p><p>Специально для таких ситуаций в Python в модуле <code>collections</code> есть класс <code>defaultdict</code>. Он позволяет задать функцию которая будет вызываться при попытке получить значение элемента если такой элемент ещё не добавлен в словарь. Используем в качестве такой функции стандартную функцию <code>int</code> которая всегда возвращает 0.</p><p>import collections</p><p>def countChar2(text): res = collections.defaultdict(int)</p><pre><code>for c in text:\n    res\\[c\\] += 1\nfor key, value in res.items():\n    print(key, value)\n</code></pre><p>И третий, самый простой вариант - использование класса <code>Counter</code>. В конструкторе ему передастся список, и мы сразу получаем словарь в котором подсчитано количество вхождений элементов в список.</p><p>def countChar3(text): res = collections.Counter(text)</p><pre><code>for key, value in res.items():\n    print(key, value)\n</code></pre><h3 id="полныи-код-примера" tabindex="-1"><a class="header-anchor" href="#полныи-код-примера" aria-hidden="true">#</a> Полный код примера</h3><p>text = &quot;&quot;&quot;Контрпример категорически искажает экспериментальный неопределенный интеграл. Аксиома, как следует из вышесказанного, последовательно продуцирует сходящийся ряд. Математическое моделирование однозначно показывает, что алгебра по-прежнему востребована. Минимум оправдывает интеграл от функции, обращающейся в бесконечность в изолированной точке, дальнейшие выкладки оставим студентам в качестве несложной домашней работы. Критерий сходимости Коши категорически усиливает сходящийся ряд, при этом, вместо 13 можно взять любую другую константу. Критерий сходимости Коши последовательно определяет эмпирический критерий интегрируемости. Критерий сходимости Коши восстанавливает равновероятный интеграл от функции, обращающейся в бесконечность в изолированной точке. Нормальное распределение, общеизвестно, последовательно. Согласно предыдущему, умножение вектора на число концентрирует интеграл от функции, обращающейся в бесконечность в изолированной точке. Собственное подмножество, общеизвестно, поддерживает интеграл Пуассона, что несомненно приведет нас к истине. Очевидно проверяется, что ортогональный определитель поддерживает изоморфный криволинейный интеграл. Неравенство Бернулли, как следует из вышесказанного, поразительно.&quot;&quot;&quot;</p><h1 id="текст-получен-из-https-yandex-ru-referats" tabindex="-1"><a class="header-anchor" href="#текст-получен-из-https-yandex-ru-referats" aria-hidden="true">#</a> текст получен из https://yandex.ru/referats/</h1><p>import collections import re</p><p>text = text.lower() text = re.sub(r&#39;[.\\-,!\\s\\d]&#39;, &#39;&#39;, text)</p><p>def countChar1(text): res = {} for c in text: if c not in res: res[c] = 1 else: res[c] += 1 for key, value in res.items(): print(key, value)</p><p>def countChar2(text): res = collections.defaultdict(int)</p><pre><code>for c in text:\n    res\\[c\\] += 1\nfor key, value in res.items():\n    print(key, value)\n</code></pre><p>def countChar3(text): res = collections.Counter(text)</p><pre><code>for key, value in res.items():\n    print(key, value)\n</code></pre><p>print(&#39;countChar1&#39;) countChar1(text)</p><p>print(&#39;&#39;, &#39;countChar2&#39;, sep=&#39;\\n&#39;) countChar2(text)</p><p>print(&#39;&#39;, &#39;countChar3&#39;, sep=&#39;\\n&#39;) countChar3(text)</p><h3 id="ссылки" tabindex="-1"><a class="header-anchor" href="#ссылки" aria-hidden="true">#</a> Ссылки</h3>',25),p={href:"https://codefisher.org/catch/blog/2015/04/22/python-how-group-and-count-dictionaries/",target:"_blank",rel:"noopener noreferrer"},d=(0,n.Uk)("Python How To: Group and Count with Dictionaries"),s={render:function(e,t){const r=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[(0,n._)("h1",a,[i,(0,n.Uk)(" "+(0,o.zw)(e.$frontmatter.title),1)]),c,(0,n._)("p",null,[(0,n._)("a",p,[d,(0,n.Wm)(r)])])],64)}}}}]);