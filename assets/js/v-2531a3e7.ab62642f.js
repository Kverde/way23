"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[975],{39057:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-2531a3e7",path:"/%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D0%BE%D1%80%D1%8B-%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D0%B5%D0%B9-record-%D0%B2-delphi.html",title:"Конструкторы записей (record) в Delphi",lang:"ru-RU",frontmatter:{title:"Конструкторы записей (record) в Delphi",date:"2019-05-11",categories:["Delphi"],tags:["Delphi","перевод"]},excerpt:"",headers:[],filePathRelative:"конструкторы-записей-record-в-delphi.md",git:{updatedTime:1692859375e3}}},24738:(e,n,s)=>{s.r(n),s.d(n,{default:()=>h});var a=s(66252),r=s(3577);const l={id:"frontmatter-title",tabindex:"-1"},p=(0,a._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),i=(0,a.Uk)("Вольный перевод поста "),c={href:"https://sergworks.wordpress.com/2012/03/13/record-constructors-in-delphi/",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("Record Constructors in Delphi"),b=(0,a.Uk)("Конструкторы записей в Delphi — особенность языка которая вызывает вопросы. Зачем они нужны и когда их использовать вместо методов записей? В "),t={href:"http://docwiki.embarcadero.com/RADStudio/en/Structured_Types#Records_.28advanced.29",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("документации Delphi"),o=(0,a.Uk)(" написано следующее:"),m=(0,a.uE)('<blockquote><p>Records are constructed automatically, using a default no-argument constructor, but classes must be explicitly constructed. Because records have a default no-argument constructor, any user-defined record constructor must have one or more parameters.</p><p>Записи создаются автоматически, используя конструктор по умолчанию без параметров, а классы должны создаваться в явном виде. Из-за того что записи имеют конструктор по умолчанию без параметров любой определённый пользователем конструктор должен содержать как минимум один параметр.</p></blockquote><p>Приведённая выше документация ничего не объясняет. В Delphi не существует такой вещи как &quot;конструктор по умолчанию без параметров&quot;. Сразу возникает ещё один вопрос — почему в Delphi запрещены конструкторы без параметров и разрешены с параметрами?</p><p>На самом деле конструкторы записей в Delphi это просто специальный синтаксис для методов записей.</p><p>Предположим, вам нужна запись которая реализует комплексные числа и требуется метод инициализации. Вы можете использовать функцию</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>type\n  TComplex = record\n    Re, Im: Double;\n    function Create(ARe, AIm: Double): TComplex;\n  end;\n\n  function TComplex.Create(ARe, AIm: Double): TComplex;\n  begin\n    Result.Re:= ARe;\n    Result.Im:= AIm;\n  end;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>или процедуру</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>type\n  TComplex = record\n    Re, Im: Double;\n    procedure Create(ARe, AIm: Double);\n  end;\n\n  procedure TComplex.Create(ARe, AIm: Double);\n  begin\n    Re:= ARe;\n    Im:= AIm;\n  end;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Используя конструктор в записи вы можете совместить обе формы</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>type\n  TComplex = record\n    Re, Im: Double;\n    constructor Create(ARe, AIm: Double);\n  end;\n\n  constructor TComplex.Create(ARe, AIm: Double);\n  begin\n    Re:= ARe;\n    Im:= AIm;\n  end;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Можно вызывать конструктор как функцию</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>var \n  C: TComplex;\nbegin\n  C:= TComplex.Create(0, 0);\nend.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>или как процедуру</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>var \n  C: TComplex;\nbegin\n  C.Create(0, 0);\nend.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Обе формы корректны.</p><p>Пример выше может быть слишком упрошенным и выглядеть искусственно, но иногда возможность вызывать метод записи как функцию и как процедуру полезна и удобна.</p>',15),h={render:function(e,n){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("h1",l,[p,(0,a.Uk)(" "+(0,r.zw)(e.$frontmatter.title),1)]),(0,a._)("p",null,[i,(0,a._)("a",c,[u,(0,a.Wm)(s)])]),(0,a._)("p",null,[b,(0,a._)("a",t,[d,(0,a.Wm)(s)]),o]),m],64)}}}}]);