"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[2577],{24637:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-259e2f1a",path:"/%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D0%B8-%D0%B2%D0%B8%D0%B4%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D0%B8-%D0%B2-python.html",title:"Области видимости в Python",lang:"ru-RU",frontmatter:{title:"Области видимости в Python",date:"2020-03-04",categories:["Python"],tags:["Python","перевод"]},excerpt:"",headers:[{level:2,title:"Виды областей видимости",slug:"виды-областеи-видимости",children:[]},{level:2,title:"Замыкания",slug:"замыкания",children:[]},{level:2,title:"global и nonlocal",slug:"global-и-nonlocal",children:[]}],filePathRelative:"области-видимости-в-python.md",git:{updatedTime:1692859375e3}}},93374:(n,a,s)=>{s.r(a),s.d(a,{default:()=>g});var e=s(66252),p=s(3577);const l={id:"frontmatter-title",tabindex:"-1"},t=(0,e._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),c=(0,e.Uk)("Перевод статьи "),o={href:"https://www.farside.org.uk/201307/understanding_python_scope",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("Understanding Python scope"),u=(0,e.Uk)("."),i=(0,e.uE)('<p>Рассмотрим функцию Python и модульный тест для неё. Что в ней неверно?</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> unittest\n\n<span class="token keyword">def</span> <span class="token function">method_under_test</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">&quot;&quot;&quot;Call callback with value.&quot;&quot;&quot;</span>\n    callback<span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyTestCase</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">test_function_calls_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        callback_called <span class="token operator">=</span> <span class="token boolean">False</span>\n        <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            callback_called <span class="token operator">=</span> <span class="token boolean">True</span>\n            <span class="token keyword">if</span> actual <span class="token operator">!=</span> <span class="token number">42</span><span class="token punctuation">:</span>\n                <span class="token keyword">raise</span> AssertionError<span class="token punctuation">(</span><span class="token string">&#39;wrong value!&#39;</span><span class="token punctuation">)</span>\n\n        method_under_test<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>assertTrue<span class="token punctuation">(</span>callback_called<span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Запустим тест:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ python test.py\nF\n======================================================================\nFAIL: test_function_calls_callback (__main__.MyTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;x.py&quot;, line 16, in test_function_calls_callback\n    self.assertTrue(callback_called)\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nFAILED (failures=1)\n$\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Выглядит так как будто функция <code>callback</code> не вызвана. Проверим это: если изменить аргумент для <code>callback</code> передаваемый в <code>method_under_test()</code>, вы увидите что проверка в функции <code>callback</code> срабатывает.</p><p>Разберёмся почему так происходит.</p><h2 id="виды-областеи-видимости" tabindex="-1"><a class="header-anchor" href="#виды-областеи-видимости" aria-hidden="true">#</a> Виды областей видимости</h2>',7),k=(0,e.Uk)("Начнём с основ. Как и большинство языков, Python использует "),b={href:"https://way23.ru/%D1%81%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5-%D0%B8-%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5-%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D0%B8-%D0%B2/",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("статические области видимости"),m=(0,e.Uk)(" переменных. Упрощённо, это означает, что для определения объекта на который ссылается идентификатор достаточно только изучения текста программы."),D=(0,e.uE)('<p>При использовании динамических областей видимости переменных невозможно определить объект на который ссылается идентификатор до запуска программы. Поиск объекта зависит от контекста в котором запускается код (обычно, реализуется в виде стека привязок переменных которые добавляются и удаляются при вызове и выходе из функций).</p><p>Динамические области видимости редко применяются в современных языках программирования, так как затрудняют анализ программы: определить поведение функции значительно сложнее. Примеры языков которые использующих динамические области видимости: Perl и Emacs Lisp. Все ANGOL3-подобные языки (Pascal, C, C#, Java и др.) используют статические области видимости.</p><p>Статические области видимости также называют лексическими областями видимости. Иногда термин лексические области видимости используется для отделения подмножества языков со статическими областями видимости которые разрешают произвольные вложенные области видимости: для определения привязки переменной к объекту используются родительские области видимости.</p><h2 id="замыкания" tabindex="-1"><a class="header-anchor" href="#замыкания" aria-hidden="true">#</a> Замыкания</h2><p>Никакое из определений выше не имеет ничего общего с замыканиями. Замыкания это экземпляр функции ссылающийся на нелокальные переменные. Таким образом, замыкание это комбинация лямбда-выражения (функции со свободными переменными) вместе с привязкой свободных переменных к специальным объектам. Замыкание не означает анонимную функцию, или функцию без переменных.</p><p>В тоже время, различия между языками могут быть в том могут ли перепрвязываться нелокальные переменные внутри замыкания и видны ли последствия этого другим замыканиям (и даже при повторном вызове одного замыкания).</p><p>Единственная связь между областями видимости и замыканиями в том, что эффективная одновременная поддержка статических областей видимости и вложенных функций первого порядка требует поддержки замыканий.</p><h2 id="global-и-nonlocal" tabindex="-1"><a class="header-anchor" href="#global-и-nonlocal" aria-hidden="true">#</a> global и nonlocal</h2><p>Вернёмся к примеру. Python использует статические области видимости и не содержит явного оператора определения переменной (как ключевое слово <strong>var</strong>). Это означает что когда оператор присваивания ссылается на переменную, то интерпретатор должен знать как определить что должно произойти: изменение существующей нелокальной привязки этой переменной к объекту или создание новой локальной привязки которая скроет существующую.</p><p>Правило используемое в Python: любое присваивание внутри блока устанавливает новую локальную привязку. Если используется ключевое слово <code>global</code> перед именем переменной внутри блока то привязка создаётся на уровне модуля.</p><p>Когда мы пишем:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_function_calls_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    callback_called <span class="token operator">=</span> <span class="token boolean">False</span>\n    <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        callback_called <span class="token operator">=</span> <span class="token boolean">True</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Второе присваивание создаёт новую локальную привязку для переменной <code>callback_called</code> которая скрывает нелокальную. Исходная переменная, объявленная в начале метода <code>test_function_calls_callback</code> не меняется.</p><p>Python мог бы делать и по-другому: например, Ruby 1.8 интерпретирует присваивание внутри блока как создание новой привязки только если она не скроет уже существующую локальную привязку, если привязка уже существует то происходит перепривязка существующей переменной.</p><p>В Python 3 добавлено ключевое слово <code>nonlocal</code>, которое как <code>global</code>, может использоваться для принудительной интерпретации присваивания как создания (или переписывания) привязки во внешней области видимости.</p>',15),h=(0,e.Uk)("Проблему также можно решить использование "),B={href:"https://way23.ru/%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D1%8F%D0%B5%D0%BC%D1%8B%D0%B5-%D0%B8-%D0%BD%D0%B5%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D1%8F%D0%B5%D0%BC%D1%8B%D0%B5-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D1%8B-%D0%B2-python/",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("изменяемых структур данных"),f=(0,e.Uk)(":"),y=(0,e.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_function_calls_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    callback_called <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span>\n    <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        callback_called<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>\n        <span class="token keyword">if</span> actual <span class="token operator">!=</span> <span class="token number">42</span><span class="token punctuation">:</span>\n            <span class="token keyword">raise</span> AssertionError<span class="token punctuation">(</span><span class="token string">&#39;wrong value!&#39;</span><span class="token punctuation">)</span>\n\n    method_under_test<span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>\n    self<span class="token punctuation">.</span>assertTrue<span class="token punctuation">(</span>callback_called<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),g={render:function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",l,[t,(0,e.Uk)(" "+(0,p.zw)(n.$frontmatter.title),1)]),(0,e._)("p",null,[c,(0,e._)("a",o,[r,(0,e.Wm)(s)]),u]),i,(0,e._)("p",null,[k,(0,e._)("a",b,[d,(0,e.Wm)(s)]),m]),D,(0,e._)("p",null,[h,(0,e._)("a",B,[_,(0,e.Wm)(s)]),f]),y],64)}}}}]);