"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[3362],{72422:(e,n,r)=>{r.r(n),r.d(n,{data:()=>t});const t={key:"v-ce730790",path:"/sql-injection-%D0%B2-delphi.html",title:"SQL Injection в Delphi",lang:"ru-RU",frontmatter:{title:"SQL Injection в Delphi",date:"2019-05-17",categories:["Delphi"],tags:["Delphi","sql"]},excerpt:"",headers:[],filePathRelative:"sql-injection-в-delphi.md",git:{updatedTime:1692859375e3}}},5493:(e,n,r)=>{r.r(n),r.d(n,{default:()=>_});var t=r(66252),a=r(3577);const l={id:"frontmatter-title",tabindex:"-1"},s=(0,t._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),i=(0,t.Uk)("Перевод поста "),p={href:"http://robstechcorner.blogspot.com/2016/04/sql-injection.html",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("SQL Injection"),c=(0,t.Uk)("Я понял, что в своём недавнем посте "),d={href:"http://robstechcorner.blogspot.com/2016/04/security-assumptions.html",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("security assumptions"),m=(0,t.Uk)(" пропустил одно важное предположение (сейчас это исправлено):"),h=(0,t._)("p",null,[(0,t._)("strong",null,"Предполагайте, что все входные данные могут быть вредоносными.")],-1),b=(0,t.Uk)("Сегодня я хочу показать очень общую ошибку, которая может возникнуть во всех языках и SQL базах данных, и то как её можно использовать. Эта ошибка называется "),g={href:"https://ru.wikipedia.org/wiki/%D0%92%D0%BD%D0%B5%D0%B4%D1%80%D0%B5%D0%BD%D0%B8%D0%B5_SQL-%D0%BA%D0%BE%D0%B4%D0%B0",target:"_blank",rel:"noopener noreferrer"},D=(0,t.Uk)("внедрение SQL кода"),k=(0,t.Uk)(". Я слышал, что разработчики предполагают что эта проблема связана только с web-приложениями. Но я видел эту проблему во всех типах приложений которые работают с базой данных."),f=(0,t.Uk)("Сегодняшний пример является VCL приложением использующим FireDAC для доступа к SQLite. Пример можно найти в репозитории "),S={href:"https://github.com/rlove/security-demo",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("security-demo"),Q=(0,t.Uk)(" на GitHub."),L=(0,t.uE)('<p>Внедрения SQL имеют место когда вы не используете параметры, из-за этого входные данные имеют возможность изменять вашу команду SQL.</p><p>Ниже показан небезопасный путь передать значение из поля ввода в запрос</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>FDQuery1.SQL.Add(&#39;select * from tbl1 where name like &#39;&#39;&#39; + edtSearchTerm.Text +&#39;%&#39;&#39;&#39;);\nFDQuery1.Open;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Если я введу следующий текст в <code>edtSearchTerm.text</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>a &#39; union select name, sql from sqlite_master --\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>То я получу список таблиц в база данных, в котором просто увидеть другую таблицу с названием <code>salary</code>. Затем я могу ввести следующее и получить всю информацию об оплате.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>a &#39; union select name, value from salary --\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Ниже показан безопасный способ сделать туже функцию</p><div class="language-delphi ext-delphi line-numbers-mode"><pre class="language-delphi"><code>FDQuery1.SQL.Add(&#39;select * from tbl1 where name like :name&#39;);\nFDQuery1.ParamByName(&#39;name&#39;).asString := edtSearchTerm.Text + &#39;%&#39;;\nFDQuery1.Open;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Теперь я могу снова попытаться произвести внедрение SQL с помощью тех-же строк. И это мне не удаться, так как строки теперь внутри параметра и следовательно не могут изменить оператор SQL. Проблемы легко избежать, но всё же это довольно распространённая ошибка.</p><p>Тестирование на внедрения SQL кода очень простое — вы пробуете завершить ввод одиночной или двойной кавычкой. Если вы получаете неожиданные ошибки то у вас есть возможность SQL Injection.</p><p>Мы склонны концентрироваться на вводе от пользователя, но API такие как SOAP или REST также могут стать целью SQL Injection. Поэтому я очень осторожно сказал что нужно проверять <strong>все входные данные</strong>, а не только ввод пользователя.</p>',12),_={render:function(e,n){const r=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[(0,t._)("h1",l,[s,(0,t.Uk)(" "+(0,a.zw)(e.$frontmatter.title),1)]),(0,t._)("p",null,[i,(0,t._)("a",p,[o,(0,t.Wm)(r)])]),(0,t._)("p",null,[c,(0,t._)("a",d,[u,(0,t.Wm)(r)]),m]),h,(0,t._)("p",null,[b,(0,t._)("a",g,[D,(0,t.Wm)(r)]),k]),(0,t._)("p",null,[f,(0,t._)("a",S,[v,(0,t.Wm)(r)]),Q]),L],64)}}}}]);