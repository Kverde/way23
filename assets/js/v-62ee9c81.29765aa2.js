"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[7920],{52916:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-62ee9c81",path:"/%D0%BD%D0%B0%D0%B8%D0%B1%D0%BE%D0%BB%D1%8C%D1%88%D0%B8%D0%B9-%D0%BE%D0%B1%D1%89%D0%B8%D0%B9-%D0%B4%D0%B5%D0%BB%D0%B8%D1%82%D0%B5%D0%BB%D1%8C-%D0%B4%D0%B2%D1%83%D1%85-%D1%87%D0%B8%D1%81%D0%B5%D0%BB.html",title:"Наибольший общий делитель двух чисел Фибоначчи",lang:"ru-RU",frontmatter:{title:"Наибольший общий делитель двух чисел Фибоначчи",date:"2019-11-20",categories:["Python","Алгоритмы"]},excerpt:"",headers:[{level:2,title:"Задача",slug:"задача",children:[]},{level:2,title:"Решение",slug:"решение",children:[]},{level:2,title:"Сложность",slug:"сложность",children:[]},{level:2,title:"Код",slug:"код",children:[]}],filePathRelative:"наибольший-общий-делитель-двух-чисел.md",git:{updatedTime:1692859375e3}}},56352:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var p=a(66252),e=a(3577);const t={id:"frontmatter-title",tabindex:"-1"},o=(0,p._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),l=(0,p._)("h2",{id:"задача",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#задача","aria-hidden":"true"},"#"),(0,p.Uk)(" Задача")],-1),c=(0,p._)("p",null,"Найти последнюю цифру наибольшего общего делителя двух чисел Фибоначчи.",-1),r=(0,p._)("h2",{id:"решение",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#решение","aria-hidden":"true"},"#"),(0,p.Uk)(" Решение")],-1),u=(0,p._)("p",null,"Сразу отклоняем вычисление чисел Фибоначчи и нахождение их НОД, так как числа могу быть очень большие.",-1),i=(0,p.Uk)("Воспользуемся "),k={href:"https://ru.wikipedia.org/wiki/%D0%A7%D0%B8%D1%81%D0%BB%D0%B0_%D0%A4%D0%B8%D0%B1%D0%BE%D0%BD%D0%B0%D1%87%D1%87%D0%B8",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("свойством чисел Фибоначчи"),d=(0,p.Uk)(":"),D=(0,p._)("p",null,"Наибольший общий делитель двух чисел Фибоначчи равен числу Фибоначчи с индексом, равным наибольшему общему делителю индексов.",-1),m=(0,p._)("p",null,"[latex]НОД(F_n, F_m) = F_{НОД(n, m)}[/latex]",-1),B=(0,p.Uk)("Учитвая это вычисляем индекс числа Фибоначчи который одновременно является и нужным НОД, а затем находим его последнее число при помощи "),h={href:"https://way23.ru/%D0%BF%D0%BE%D0%B8%D1%81%D0%BA-%D0%BF%D0%B5%D1%80%D0%B8%D0%BE%D0%B4%D0%B0-%D0%BF%D0%B8%D0%B7%D0%B0%D0%BD%D0%BE/",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("периода Пизано"),_=(0,p.Uk)("."),w=(0,p.uE)('<h2 id="сложность" tabindex="-1"><a class="header-anchor" href="#сложность" aria-hidden="true">#</a> Сложность</h2><p>Сложность алгоритма равна сложности нахождения наибольшего общего делителя. Так как вычисления периода Пизано при заданном модуле ограничено сверху, то его можно взять за константу.</p><h2 id="код" tabindex="-1"><a class="header-anchor" href="#код" aria-hidden="true">#</a> Код</h2><p>На вход подаются два индекса чисел Фибоначчи.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib_mod</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    seq_pisano <span class="token operator">=</span> find_pisano<span class="token punctuation">(</span>m<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> seq_pisano<span class="token punctuation">[</span>n <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>seq_pisano<span class="token punctuation">)</span><span class="token punctuation">]</span>\n\n<span class="token keyword">def</span> <span class="token function">find_pisano</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    pisano <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>\n    n0 <span class="token operator">=</span> <span class="token number">0</span>\n    n1 <span class="token operator">=</span> <span class="token number">1</span>\n\n    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        n0<span class="token punctuation">,</span> n1 <span class="token operator">=</span> n1<span class="token punctuation">,</span> <span class="token punctuation">(</span>n0 <span class="token operator">+</span> n1<span class="token punctuation">)</span> <span class="token operator">%</span> m\n        pisano<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n1<span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> pisano<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> pisano<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>\n            <span class="token keyword">break</span>\n\n    <span class="token keyword">return</span> pisano<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>\n\n<span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">while</span> a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>\n        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b <span class="token operator">%</span> a<span class="token punctuation">,</span> a\n    <span class="token keyword">return</span> b\n\nn<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nf <span class="token operator">=</span> gcd<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>\nr <span class="token operator">=</span> fib_mod<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',5),y={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("h1",t,[o,(0,p.Uk)(" "+(0,e.zw)(n.$frontmatter.title),1)]),l,c,r,u,(0,p._)("p",null,[i,(0,p._)("a",k,[b,(0,p.Wm)(a)]),d]),D,m,(0,p._)("p",null,[B,(0,p._)("a",h,[f,(0,p.Wm)(a)]),_]),w],64)}}}}]);