"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[1709],{85080:(e,r,n)=>{n.r(r),n.d(r,{data:()=>t});const t={key:"v-10737e4d",path:"/%D0%BF%D0%B5%D1%80%D0%B5%D0%B1%D0%BE%D1%80-%D1%81%D0%BE%D1%81%D0%B5%D0%B4%D0%BD%D0%B8%D1%85-%D0%BA%D0%BB%D0%B5%D1%82%D0%BE%D0%BA-%D0%BD%D0%B0-%D0%B4%D0%B2%D1%83%D1%85%D0%BC%D0%B5%D1%80%D0%BD%D0%BE.html",title:"Перебор соседних клеток на двухмерном поле",lang:"ru-RU",frontmatter:{title:"Перебор соседних клеток на двухмерном поле",date:"2017-09-21",categories:["Python","Алгоритмы"],tags:["Python"]},excerpt:"",headers:[{level:3,title:"Ограниченное поле",slug:"ограниченное-поле",children:[]},{level:3,title:"Неограниченное поле",slug:"неограниченное-поле",children:[]},{level:3,title:"Полный код примера",slug:"полныи-код-примера",children:[]}],filePathRelative:"перебор-соседних-клеток-на-двухмерно.md",git:{updatedTime:1692859375e3}}},73251:(e,r,n)=>{n.r(r),n.d(r,{default:()=>B});var t=n(66252),i=n(3577);const d={id:"frontmatter-title",tabindex:"-1"},l=(0,t._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),u=(0,t.uE)('<p>Рассмотрим задачу похожую на игру Сапёр</p><blockquote><p>Дано прямоугольное поле размером n на m. В поле каждая клетка обозначена либо символом точки (&#39;.&#39;) точкой либо звёздочки (&#39;*&#39;). Точка означает пустое поле поле, звёздочка мину. Вывести на экран поле такого же размера где вместо точек указанна цифра - количество мин рядом с этой клеткой.</p></blockquote><p>Далее описан способ перебора соседних клеток у определённой клетки для решения этой задачи. В двух вариантах: когда поле ограниченно, и когда неограниченно - клетка справа поля граничит с клеткой слева, клетки сверху граничат с клетками снизу. Похожий способ можно применять для сходных случаев перебора, например при переборе клеток шахматной доски куда может сходить конь.</p><h3 id="ограниченное-поле" tabindex="-1"><a class="header-anchor" href="#ограниченное-поле" aria-hidden="true">#</a> Ограниченное поле</h3><p>С клетками которые не находятся на границе поля проблем нет, можно просто последовательно перебрать все восемь вариантов <code>field[y - 1][x - 1]</code>, <code>field[y - 1][x]</code> и тд. Но с клетками на границах такое не проходит - будет выход за границу списка. Первый вариант который приходит в голову добавить к каждому варианту условия:</p><p>if y &gt; 0 and x &gt; 0: if field[y - 1][x - 1] == &#39;*&#39;: count += 1</p><p>if y &gt; 0: if field[y - 1][x] == &#39;*&#39;: count += 1</p><p>и так все варианты. Решение рабочее, но есть более простой и наглядный вариант. Перебираем в цикле все варианты смещений, от -1 до 1 по x и по y, а затем одним условием проверяем возможна ли проверяемая позиция.</p><p>def countWithBorder(field, w, h, x, y): if field[y][x] == &#39;*&#39;: return &#39;*&#39;</p><pre><code>r = 0\nfor dx in range(-1, 2):\n    for dy in range(-1, 2):\n        if dx == 0 and dy == 0:\n            continue\n\n        curX = x + dx\n        curY = y + dy\n\n        if 0 &lt;= curX &lt; w and 0 &lt;= curY &lt; h:\n            if field\\[curY\\]\\[curX\\] == &#39;\\*&#39;:\n                r += 1\nreturn str(r)\n</code></pre><h3 id="неограниченное-поле" tabindex="-1"><a class="header-anchor" href="#неограниченное-поле" aria-hidden="true">#</a> Неограниченное поле</h3>',11),a=(0,t.Uk)("Для неограниченного поля воспользуемся тем же способом, с применением оператора получения "),f={href:"http://way23.ru/%D0%BE%D1%81%D0%BE%D0%B1%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B9-%D1%86%D0%B5%D0%BB%D0%BE%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE/",target:"_blank",rel:"noopener noreferrer"},p=(0,t.Uk)("остатка"),o=(0,t.Uk)(". Для решения этой задачи знак остатка должен совпадать со знаком делителя, как в Python. Проверять через "),D=(0,t._)("code",null,"if",-1),c=(0,t.Uk)(" в этом случае вообще ничего не придется, так как у любой клетки есть соседи."),h=(0,t.uE)('<p>def countWithoutBorder(field, w, h, x, y): if field[y][x] == &#39;*&#39;: return &#39;*&#39;</p><pre><code>r = 0\nfor dx in range(-1, 2):\n    for dy in range(-1, 2):\n        if dx == 0 and dy == 0:\n            continue\n\n        curX = (x + dx) % w\n        curY = (y + dy) % h\n\n        if field\\[curY\\]\\[curX\\] == &#39;\\*&#39;:\n            r += 1\nreturn str(r)\n</code></pre><h3 id="полныи-код-примера" tabindex="-1"><a class="header-anchor" href="#полныи-код-примера" aria-hidden="true">#</a> Полный код примера</h3><p>w, h = [int(i) for i in input().split()]</p><p>field = [] for i in range(h): field.append(input())</p><p>def countWithBorder(field, w, h, x, y): if field[y][x] == &#39;*&#39;: return &#39;*&#39;</p><pre><code>r = 0\nfor dx in range(-1, 2):\n    for dy in range(-1, 2):\n        if dx == 0 and dy == 0:\n            continue\n\n        curX = x + dx\n        curY = y + dy\n\n        if 0 &lt;= curX &lt; w and 0 &lt;= curY &lt; h:\n            if field\\[curY\\]\\[curX\\] == &#39;\\*&#39;:\n                r += 1\nreturn str(r)\n</code></pre><p>def countWithoutBorder(field, w, h, x, y): if field[y][x] == &#39;*&#39;: return &#39;*&#39;</p><pre><code>r = 0\nfor dx in range(-1, 2):\n    for dy in range(-1, 2):\n        if dx == 0 and dy == 0:\n            continue\n\n        curX = (x + dx) % w\n        curY = (y + dy) % h\n\n        if field\\[curY\\]\\[curX\\] == &#39;\\*&#39;:\n            r += 1\nreturn str(r)\n</code></pre><p>def printFiled(filed, h): for y in range(h): print(resultFiled[y])</p><p>print()</p><p>resultFiled = [] for y in range(h): resultFiled.append(&#39;&#39;) for x in range(w): resultFiled[y] = resultFiled[y] + countWithBorder(field, w, h, x, y) printFiled(resultFiled, h) print()</p><p>resultFiled = [] for y in range(h): resultFiled.append(&#39;&#39;) for x in range(w): resultFiled[y] = resultFiled[y] + countWithoutBorder(field, w, h, x, y) printFiled(resultFiled, h) print()</p><p>4 5 *... *... .*.. .... *...</p><p>*200 *310 2*10 2210 *100</p><p>*303 *312 2*11 2211 *202</p>',16),B={render:function(e,r){const n=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[(0,t._)("h1",d,[l,(0,t.Uk)(" "+(0,i.zw)(e.$frontmatter.title),1)]),u,(0,t._)("p",null,[a,(0,t._)("a",f,[p,(0,t.Wm)(n)]),o,D,c]),h],64)}}}}]);