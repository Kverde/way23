"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[1843],{98998:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-92ca624c",path:"/python-%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D1%82%D1%80%D0%BE%D0%BA%D0%B8-%D0%B8-%D0%BE%D1%82%D1%81%D1%82%D1%83%D0%BF%D1%8B.html",title:"Python. Выражение, строки и отступы",lang:"ru-RU",frontmatter:{title:"Python. Выражение, строки и отступы",date:"2019-10-04",categories:["Python"],tags:["intermediate-python"]},excerpt:"",headers:[{level:2,title:"Ссылки",slug:"ссылки",children:[]}],filePathRelative:"python-выражение-строки-и-отступы.md",git:{updatedTime:1692859375e3}}},99010:(n,s,e)=>{e.r(s),e.d(s,{default:()=>b});var a=e(66252),t=e(3577);const l={id:"frontmatter-title",tabindex:"-1"},r=(0,a._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),p=(0,a.uE)('<p>Пост написан на основе части 3.2 книги Intermediate Python. Obi Ike-Nwosu.</p><p>Программа на Python состоит из логических строк ограниченных токеном <strong>NEWLINE</strong>. Каждая логическая строка эквивалентна простому оператору. Составные операторы формируются из нескольких логических строк.</p><p>Логическая строка создаётся из одной или нескольких физических строк используя явные или не явные правила объединения строк. Физическая строка — это последовательность символов завершающаяся символами перевода строки (end-of-line sequence). Python неявно рассматривает физические строки как логические, устраняя необходимость в точке с запятой для разделения выражений. Однако точка с запятой может использоваться для разделения одной физической строки на несколько логических:</p><div class="language-Python ext-Python line-numbers-mode"><pre class="language-Python"><code>&gt;&gt;&gt; i = 5; print i;\n5\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Несколько физических строк в явном виде объединяются в одну логическую символом &quot;\\&quot;:</p><div class="language-Python ext-Python line-numbers-mode"><pre class="language-Python"><code>&gt;&gt;&gt; name = &quot;Obi Ike-Nwosu&quot;\n&gt;&gt;&gt; cleaned_name = name.replace(&quot;-&quot;, &quot; &quot;). \\\n... replace(&quot; &quot;, &quot;&quot;)\n&gt;&gt;&gt; cleaned_name\n&#39;ObiIkeNwosu&#39;\n&gt;&gt;&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Физические строки соединяются неявно, без использования символа продолжения строки (&quot;\\&quot;), когда выражение находится в тройных строковых кавычках, заключено в скобки <code>(...)</code>, <code>[...]</code>, или <code>{...}</code>.</p><p>Python содержит два типа операторов.</p><p>Простые операторы занимающие одиночные логические строки. Они включают в себя присваивание, yield и др. Общий синтаксис простых операторов:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>simple_stmt ::= expression_stmt\n            | assert_stmt\n            | assignment_stmt\n            | augmented_assignment_stmt\n            | pass_stmt\n            | del_stmt\n            | return_stmt\n            | yield_stmt\n            | raise_stmt\n            | break_stmt\n            | continue_stmt\n            | import_stmt\n            | global_stmt\n            | nonlocal_stmt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Составные операторы занимающие несколько логических строк. Они включают в себя выражения циклов while и for. Общий синтаксис составных операторов:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>compound_stmt ::= if_stmt\n              | while_stmt\n              | for_stmt\n              | try_stmt\n              | with_stmt\n              | funcdef\n              | classdef\n\nsuite ::= stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT\n\nstatement ::= stmt_list NEWLINE | compound_stmt\n\nstmt_list ::= simple_stmt (&quot;;&quot; simple_stmt)* [&quot;;&quot;]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Составные операторы содержат одно или несколько предложений (clause). Предложение состоит из заголовка (header) и тела (suite). Заголовки предложений для одного составного оператора имеют одинаковый отступ и начинаются с уникального идентификатора (while, if и т.д.) и с двоеточия. Составной оператор <strong>if</strong> определяется так:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if_stmt ::=  &quot;if&quot; expression &quot;:&quot; suite\n             ( &quot;elif&quot; expression &quot;:&quot; suite )*\n             [&quot;else&quot; &quot;:&quot; suite]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Выполнение тела предложения контролируется заголовком:</p><div class="language-Python ext-Python line-numbers-mode"><pre class="language-Python"><code>&gt;&gt;&gt; num = 6\n# оператор if является составным оператором\n    # Заголовок предложения контролирует выполнение следующего блока с отступом\n&gt;&gt;&gt; if num % 2 == 0:\n        # блок тела с отступом\n...     print(&quot;The number {} is even&quot;.format(num))\n...\nThe number 6 is even\n&gt;&gt;&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Тело (suite) может быть набором из одного или нескольких операторов который следуют за двоеточием заголовка, в этом случае, операторы разделяются точкой с запятой:</p><div class="language-Python ext-Python line-numbers-mode"><pre class="language-Python"><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; z = 3\n&gt;&gt;&gt; if x &lt; y &lt; z: print(x); print(y); print(z)\n...\n1\n2\n3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Но обычно тело (suite) записывается со следующей после заголовка строки в виде одного или нескольких операторов с отступом:</p><div class="language-Python ext-Python line-numbers-mode"><pre class="language-Python"><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; z = 3\n&gt;&gt;&gt; if x &lt; y &lt; z:\n...    print(x)\n...    print(y);\n...    print(z)\n...\n1\n2\n3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Отступы используются для обозначения блоков кода таких как тела функций, условий, циклов и классов. Ведущий пробел в начале логической строки используется для вычисления отступа для этой строки, который, в свою очередь, используется для определения группировки оператора. Отступ используемый в теле блока всегда должен совпадать с отступом первого оператора в блоке.</p><h2 id="ссылки" tabindex="-1"><a class="header-anchor" href="#ссылки" aria-hidden="true">#</a> Ссылки</h2>',22),i={href:"https://docs.python.org/3.3/reference/compound_stmts.html",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("Compound statements"),b={render:function(n,s){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("h1",l,[r,(0,a.Uk)(" "+(0,t.zw)(n.$frontmatter.title),1)]),p,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",i,[u,(0,a.Wm)(e)])])])],64)}}}}]);