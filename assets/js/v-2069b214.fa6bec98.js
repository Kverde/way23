"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[9641],{71279:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2069b214",path:"/linux-awk.html",title:"Язык программирования awk",lang:"ru-RU",frontmatter:{title:"Язык программирования awk",date:"2023-12-28",categories:["Языки программирования"],tags:["awk"]},excerpt:"",headers:[{level:2,title:"Ссылки",slug:"ссылки",children:[]}],filePathRelative:"linux-awk.md",git:{updatedTime:1703754347e3}}},91592:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(66252),p=a(3577);const r={id:"frontmatter-title",tabindex:"-1"},l=(0,e._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),t=(0,e.uE)('<p>Код на языке программирования awk состоит не просто из последовательного набора операторов, как в императивном языке, а из набора правил, каждое правило состоит из шаблона и команды.</p><div class="language-awk ext-awk line-numbers-mode"><pre class="language-awk"><code>шаблон {команда}\nшаблон {команда}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Правила разделяются новой строкой — на одной строке одно правило. awk — интерпретируемый язык, поэтому его можно запускать непосредственно из Bash. В команде, шаблон или правило могут отсутствовать, но не оба одновременно. В следующей программе отсутствует правило, а одна команда выводит каждую строку.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">cat</span> text.txt \none\ntwo\nthree\nuser@debian-server:~/test$ <span class="token function">awk</span> <span class="token string">&#39;{print $0}&#39;</span> text.txt \none\ntwo\nthree\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Первым параметром программы <code>awk</code> передается код программы на языке awk, а остальные параметры — файлы для обработки. Программу можно перенести в отдельный файл и запускать <code>awk</code> с параметром <code>-f</code>.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">cat</span> script.awk \n<span class="token punctuation">{</span> print <span class="token variable">$0</span> <span class="token punctuation">}</span>\nuser@debian-server:~/test$ <span class="token function">awk</span> -f script.awk text.txt \none\ntwo\nthree\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Интерпретатор awk последовательно читает входные файлы, разбивает их на строки и каждую строку сравнивает с шаблоном в каждом правиле. Если шаблон подходит, то выполняется команда из этого правила. Если шаблон не указан, как в примере выше, то команда выполняется для каждой строки. Следующая программа содержит два одинаковых правила, поэтому на выходе строки дублируются.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">cat</span> script.awk \n<span class="token punctuation">{</span> print <span class="token variable">$0</span> <span class="token punctuation">}</span>\n<span class="token punctuation">{</span> print <span class="token variable">$0</span> <span class="token punctuation">}</span>\nuser@debian-server:~/test$ <span class="token function">awk</span> -f script.awk text.txt \none\none\ntwo\ntwo\nthree\nthree\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Если указан шаблон, то правило срабатывает в случае когда, строка входного соответствует шаблону. Шаблоны указываются в виде регулярных выражений ограниченных символами <code>/</code>.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">cat</span> script.awk \n<span class="token punctuation">{</span> print <span class="token variable">$0</span> <span class="token punctuation">}</span>\n/two/ <span class="token punctuation">{</span> print <span class="token variable">$0</span> <span class="token punctuation">}</span>\nuser@debian-server:~/test$ <span class="token function">awk</span> -f script.awk text.txt \none\ntwo\ntwo\nthree\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>В шаблоне могут быть указаны специальные значения: <code>BEGIN</code> и <code>END</code>, эти значения означают начало работы программы и окончание работы программы соответственно.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">cat</span> script.awk \nBEGIN <span class="token punctuation">{</span> print <span class="token string">&quot;start reading file&quot;</span> <span class="token punctuation">}</span>\nEND <span class="token punctuation">{</span> print <span class="token string">&quot;finish reading file&quot;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">{</span> print <span class="token variable">$0</span> <span class="token punctuation">}</span>\n/two/ <span class="token punctuation">{</span> print <span class="token variable">$0</span> <span class="token punctuation">}</span>\nuser@debian-server:~/test$ <span class="token function">awk</span> -f script.awk text.txt\nstart reading <span class="token function">file</span>\none\ntwo\ntwo\nthree\nfinish reading <span class="token function">file</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Переменная <code>$0</code> хранит значение текущей строки. Поэтому команда <code>print $0</code> выводит текущую строку. Интерпретатор awk, кроме того, что делит входной файл на строки, так же делит строки на поля. По умолчанию, разделителями полей являются пробельные символы. Переменные <code>$1</code>, <code>$2</code>, <code>$3</code> и т. д. возвращают отдельные поля.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">cat</span> customers.txt \nTom Smith <span class="token number">2000</span>\nSam Brown <span class="token number">3000</span>\nMark Adams <span class="token number">2500</span>\nPaul Ins <span class="token number">4200</span>\nJohn Smith <span class="token number">2800</span>\nTim Cook <span class="token number">2800</span>\nuser@debian-server:~/test$ <span class="token function">nano</span> script.awk \nuser@debian-server:~/test$ <span class="token function">awk</span> <span class="token string">&#39;{ print $1 }&#39;</span> customers.txt \nTom\nSam\nMark\nPaul\nJohn\nTim\nuser@debian-server:~/test$ <span class="token function">awk</span> <span class="token string">&#39;{ print $2 }&#39;</span> customers.txt \nSmith\nBrown\nAdams\nIns\nSmith\nCook\nuser@debian-server:~/test$ <span class="token function">awk</span> <span class="token string">&#39;{ print $3 }&#39;</span> customers.txt \n<span class="token number">2000</span>\n<span class="token number">3000</span>\n<span class="token number">2500</span>\n<span class="token number">4200</span>\n<span class="token number">2800</span>\n<span class="token number">2800</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>Внутри команды можно не просто выводить поля, но и писать более сложный код. В следующем примере используется операция деления и конкатенация строк.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">awk</span> <span class="token string">&#39;{ print $3 / 10 &quot;$&quot; }&#39;</span> customers.txt \n<span class="token number">200</span>$\n<span class="token number">300</span>$\n<span class="token number">250</span>$\n<span class="token number">420</span>$\n<span class="token number">280</span>$\n<span class="token number">280</span>$\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Можно изменить значение одного поля и вывести всю строк.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">awk</span> <span class="token string">&#39;{ $1 = &quot;xxx&quot;; $2 = &quot;xxx&quot;; print $0 }&#39;</span> customers.txt \nxxx xxx <span class="token number">2000</span>\nxxx xxx <span class="token number">3000</span>\nxxx xxx <span class="token number">2500</span>\nxxx xxx <span class="token number">4200</span>\nxxx xxx <span class="token number">2800</span>\nxxx xxx <span class="token number">2800</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Разделитель полей можно изменить через параметр <code>-F</code> команды <code>awk</code>.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">awk</span> -F: <span class="token string">&#39;{ print $1 }&#39;</span> /etc/passwd \nroot\ndaemon\nbin\nsys\n<span class="token function">sync</span>\ngames\n<span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Ещё несколько специальных переменных:</p><ul><li><code>NF</code> — количество полей в текущей записи</li><li><code>NR</code> — номер строки во всем входном потоке</li><li><code>FNR</code> — номер строки в текущем файле</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>user@debian-server:~/test$ <span class="token function">awk</span> <span class="token string">&#39;{ print NR &quot;(&quot; FNR &quot;):&quot; $0 }&#39;</span> text.txt text.txt \n<span class="token number">1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>:one\n<span class="token number">2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>:two\n<span class="token number">3</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>:three\n<span class="token number">4</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>:one\n<span class="token number">5</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>:two\n<span class="token number">6</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>:three\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="ссылки" tabindex="-1"><a class="header-anchor" href="#ссылки" aria-hidden="true">#</a> Ссылки</h2>',24),c={href:"https://www.gnu.org/software/gawk/manual/gawk.html",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("awk documentation"),u={href:"https://learnxinyminutes.com/docs/awk/",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("Learn awk in Y minutes"),o={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",r,[l,(0,e.Uk)(" "+(0,p.zw)(n.$frontmatter.title),1)]),t,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",c,[i,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",u,[b,(0,e.Wm)(a)])])])],64)}}}}]);