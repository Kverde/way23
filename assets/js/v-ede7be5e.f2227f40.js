"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[3363],{46334:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-ede7be5e",path:"/%D0%B3%D0%B5%D0%BD%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%B2%D1%81%D0%B5%D1%85-%D0%BF%D0%BE%D0%B4%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E.html",title:"Генерация всех подмножеств с помощью двоичного представления числа",lang:"ru-RU",frontmatter:{title:"Генерация всех подмножеств с помощью двоичного представления числа",date:"2019-09-22",categories:["Алгоритмы"],tags:["Python","множества"]},excerpt:"",headers:[],filePathRelative:"генерация-всех-подмножеств-с-помощью.md",git:{updatedTime:1692859375e3}}},47251:(n,e,s)=>{s.r(e),s.d(e,{default:()=>B});var a=s(66252),r=s(3577);const l={id:"frontmatter-title",tabindex:"-1"},t=(0,a._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),p=(0,a.Uk)("Другой варианта алгоритма "),i={href:"https://way23.ru/%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC-%D0%B3%D0%B5%D0%BD%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8-%D0%B2%D1%81%D0%B5%D1%85-%D0%BF%D0%BE%D0%B4%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2/",target:"_blank",rel:"noopener noreferrer"},b=(0,a.Uk)("генерации всех подмножеств"),u=(0,a.Uk)(". Сначала пример."),c=(0,a.uE)('<p>Дано множество из 5 элементов.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[1, 2, 3, 4, 5]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Возьмём пятизначное двоичное число и поставим в соответствие каждой цифре этого числа один из элементов исходного множества. Таким способом мы можем задавать подмножества исходного пятиэелементного множества.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>10101 = [1, 3, 5]\n00011 = [4, 5]\n00000 = []\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Если взять все числа от 00000 до 11111 то они будут соответствовать всем подмножествам исходного множества. В десятичной системе эти числа соответствуют числам от 0 до [latex]2^5 - 1[/latex].</p><p>Исходя из этих размышлений, формируем алгоритм:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n# функция возвращает множество  \n# из элементов set отмеченных единицей в mask\nget_elements(set, mask)\n\nn = длина исходного множества\nresult = пустое множество\nДля каждого i в диапазоне от 0 до 2**n - 1\n  bits = число i в двоичной форме\n  new_element = get_elements(исходное множество, bits)\n  добавить new_element в result \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Реализация на Python</p><div class="language-Python ext-Python line-numbers-mode"><pre class="language-Python"><code>source_set = [1, 2, 3]\nprint(source_set)\n\ndef get_elements(source, mask):\n    result = []\n    for n in range(len(source)):\n        if mask &amp; 1 == 1:\n            result.append(source[n])\n        mask = mask &gt;&gt; 1\n    return result\n\ndef power_set(source):\n    result = []\n\n    for i in range(2 ** len(source)):\n        result.append(get_elements(source, i))\n\n    return result\n\nprint(power_set(source_set))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',9),m=(0,a.Uk)("Для работы с битам используются "),D={href:"https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types",target:"_blank",rel:"noopener noreferrer"},o=(0,a.Uk)("битовые операции"),d=(0,a.Uk)(" с целыми числами."),B={render:function(n,e){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("h1",l,[t,(0,a.Uk)(" "+(0,r.zw)(n.$frontmatter.title),1)]),(0,a._)("p",null,[p,(0,a._)("a",i,[b,(0,a.Wm)(s)]),u]),c,(0,a._)("p",null,[m,(0,a._)("a",D,[o,(0,a.Wm)(s)]),d])],64)}}}}]);