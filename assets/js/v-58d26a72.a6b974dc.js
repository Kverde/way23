"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[2901],{63671:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-58d26a72",path:"/python-%D1%81%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5-%D0%B8-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%BE%D0%B2%D1%8B%D0%B5-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B.html",title:"Python. Статические и классовые методы",lang:"ru-RU",frontmatter:{title:"Python. Статические и классовые методы",date:"2019-10-28",categories:["Python"],tags:["ооп","intermediate-python"]},excerpt:"",headers:[{level:2,title:"Статичные методы",slug:"статичные-методы",children:[]},{level:2,title:"Классовые методы",slug:"классовые-методы",children:[]}],filePathRelative:"python-статические-и-классовые-методы.md",git:{updatedTime:1692859375e3}}},77153:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var p=a(66252),t=a(3577);const e={id:"frontmatter-title",tabindex:"-1"},o=(0,p._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),c=(0,p.Uk)("Перевод параграфа 6.5 Static and Class Methods из книги "),l={href:"https://leanpub.com/intermediatepython",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("Intermediate Python"),r=(0,p.Uk)("."),i=(0,p.uE)('<p>По умолчанию методы определённые в классе работают с экземплярами класса. Для определения статических и классовых методов применяются декораторы <code>@staticmethod</code> и <code>@classmethod</code>.</p><h2 id="статичные-методы" tabindex="-1"><a class="header-anchor" href="#статичные-методы" aria-hidden="true">#</a> Статичные методы</h2><p>Статичные методы это обычные функции внутри пространства имён класса. Ссылка на статичный метод из класса возвращает функцию вместо несвязанного метода:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    num_accounts <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance\n        Account<span class="token punctuation">.</span>num_accounts <span class="token operator">+=</span> <span class="token number">1</span>\n\n    <span class="token keyword">def</span> <span class="token function">del_account</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        Account<span class="token punctuation">.</span>num_accounts <span class="token operator">-=</span> <span class="token number">1</span>\n\n    <span class="token keyword">def</span> <span class="token function">deposit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amt<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> self<span class="token punctuation">.</span>balance <span class="token operator">+</span> amt\n\n    <span class="token keyword">def</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amt<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> self<span class="token punctuation">.</span>balance <span class="token operator">-</span> amt\n\n    <span class="token keyword">def</span> <span class="token function">inquiry</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Name={}, balance={}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>balance<span class="token punctuation">)</span>\n\n    <span class="token decorator annotation punctuation">@staticmethod</span>\n    <span class="token keyword">def</span> <span class="token function">static_test_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Current Account&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Account<span class="token punctuation">.</span>static_test_method\n<span class="token operator">&lt;</span>function Account<span class="token punctuation">.</span>static_test_method at <span class="token number">0x101b846a8</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Декоратор <code>@staticmethod</code> используется для определения статического метода. Такой метод не требует аргумента <code>self</code>.</p><p>Статичные методы предоставляют механизм для организации кода. Метод связывается с классом и может быть переопределён в потомках.</p><p>В отличии от обычных методов, являющихся обёртками над функциями, статичные методы возвращают функцию без изменений.</p><h2 id="классовые-методы" tabindex="-1"><a class="header-anchor" href="#классовые-методы" aria-hidden="true">#</a> Классовые методы</h2><p>Классовые методы работают с классами вместо экземпляров классов. Классовый метод создаётся декоратором <code>@classmethod</code>. В первый аргумент такого метода передаётся ссылка на класс вместо экземпляра объекта:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> json\n\n<span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    num_accounts <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance\n        Account<span class="token punctuation">.</span>num_accounts <span class="token operator">+=</span> <span class="token number">1</span>\n\n    <span class="token keyword">def</span> <span class="token function">del_account</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        Account<span class="token punctuation">.</span>num_accounts <span class="token operator">-=</span> <span class="token number">1</span>\n\n    <span class="token keyword">def</span> <span class="token function">deposit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amt<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> self<span class="token punctuation">.</span>balance <span class="token operator">+</span> amt\n\n    <span class="token keyword">def</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amt<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> self<span class="token punctuation">.</span>balance <span class="token operator">-</span> amt\n\n    <span class="token keyword">def</span> <span class="token function">inquiry</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Name={}, balance={}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>balance<span class="token punctuation">)</span>\n\n    <span class="token decorator annotation punctuation">@classmethod</span>\n    <span class="token keyword">def</span> <span class="token function">from_json</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> params_json<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        params <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>params_json<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;balance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token decorator annotation punctuation">@staticmethod</span>\n    <span class="token keyword">def</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Current Account&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>Пример использования классовых методов — фабрики для создания объектов. Представьте что данные для класса <code>Account</code> приходят в различных форматах: кортежи, JSON, строки. Возможности определить несколько методов <code>__init__</code> нет, поэтому классовые методы удобны для этой ситуации. Приведённый выше класс <code>Account</code> инициализируется строкой с JSON, для этого мы определили классовый метод <code>from_json</code> который принимает строку, извлекает параметры из JSON и создаёт объект используя извлечённые параметры.</p>',12),k=(0,p.Uk)("Другой пример классового метода — "),b={href:"https://docs.python.org/3/library/stdtypes.html#dict.fromkeys",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("dict.fromkeys"),d=(0,p.Uk)(". Этот метод создаёт словарь из последовательности ключей и значений."),f={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("h1",e,[o,(0,p.Uk)(" "+(0,t.zw)(n.$frontmatter.title),1)]),(0,p._)("p",null,[c,(0,p._)("a",l,[u,(0,p.Wm)(a)]),r]),i,(0,p._)("p",null,[k,(0,p._)("a",b,[m,(0,p.Wm)(a)]),d])],64)}}}}]);