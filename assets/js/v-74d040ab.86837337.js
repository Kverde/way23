"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[9564],{8827:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-74d040ab",path:"/db-clickhouse.html",title:"Базы данных: ClickHouse",lang:"ru-RU",frontmatter:{title:"Базы данных: ClickHouse",date:"2025-01-05",categories:["Базы данных"],tags:["ClickHouse","Колоночные БД"]},excerpt:"",headers:[{level:2,title:"Запуск",slug:"запуск",children:[]},{level:2,title:"clickhouse-client",slug:"clickhouse-client",children:[]},{level:2,title:"Пример на Python",slug:"пример-на-python",children:[]},{level:2,title:"Ссылки",slug:"ссылки",children:[]}],filePathRelative:"db-clickhouse.md",git:{updatedTime:1736157487e3}}},38224:(n,s,a)=>{a.r(s),a.d(s,{default:()=>D});var e=a(66252),l=a(3577);const p={id:"frontmatter-title",tabindex:"-1"},r=(0,e._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),t={href:"https://clickhouse.com",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("ClickHouse"),i=(0,e.Uk)(" ("),u={href:"https://github.com/ClickHouse/ClickHouse",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("GitHub"),b=(0,e.Uk)(") — колоночная база данных. ClickHouse используется для больших хранилищ данных для ускорения аналитических запросов. ClickHouse направлен на OLAP."),m=(0,e._)("p",null,"Для запросов ClickHouse использует свой язык похожий на SQL.",-1),k=(0,e._)("h2",{id:"запуск",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#запуск","aria-hidden":"true"},"#"),(0,e.Uk)(" Запуск")],-1),d=(0,e.Uk)("Запустить ClickHouse проще всего через "),h={href:"https://hub.docker.com/r/clickhouse/clickhouse-server/",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("docker"),v=(0,e.Uk)("."),E=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run -d --name clickhouse-server <span class="token punctuation">\\</span>\n  -p <span class="token number">8123</span>:8123 <span class="token punctuation">\\</span>\n  -p <span class="token number">9000</span>:9000 <span class="token punctuation">\\</span>\n  --ulimit <span class="token assign-left variable">nofile</span><span class="token operator">=</span><span class="token number">262144</span>:262144 <span class="token punctuation">\\</span>\n  yandex/clickhouse-server\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="clickhouse-client" tabindex="-1"><a class="header-anchor" href="#clickhouse-client" aria-hidden="true">#</a> clickhouse-client</h2>',2),f=(0,e.Uk)("ClickHouser предоставляет консольную программу для управления базой данных "),x={href:"https://clickhouse.com/docs/en/integrations/sql-clients/cli",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("clickhouse-client"),w=(0,e.Uk)("."),U=(0,e.uE)('<p>Для запуска в контейнере docker Наберите команду</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token builtin class-name">exec</span> -it clickhouse-server clickhouse-client\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Пример работы. Создаём базу данных:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>b0e4b554a392 :) CREATE DATABASE IF NOT EXISTS newdb;\n\nCREATE DATABASE IF NOT EXISTS newdb\n\nQuery id: 5b5867ab-ab57-4bd5-a902-78e7a1b75fd9\n\nOk.\n\n0 rows in set. Elapsed: 0.023 sec. \n\nb0e4b554a392 :) USE newdb;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Подключается к базе данных:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>USE newdb\n\nQuery id: 62ba7f5f-9479-4734-bad8-27b2563028fe\n\nOk.\n\n0 rows in set. Elapsed: 0.003 sec.\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Создаём таблицу в базе данных:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>b0e4b554a392 :) CREATE TABLE user (\n                    id UInt32,\n                    name String,\n                    created_at DateTime\n                ) ENGINE = MergeTree()\n                ORDER BY id;\n\nCREATE TABLE user\n(\n    `id` UInt32,\n    `name` String,\n    `created_at` DateTime\n)\nENGINE = MergeTree\nORDER BY id\n\nQuery id: cd391f57-f554-4033-b733-aab58a3d2513\n\nOk.\n\n0 rows in set. Elapsed: 0.029 sec. \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>Выводим все таблицы в базе данных:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>b0e4b554a392 :) SHOW TABLES;\n\nSHOW TABLES\n\nQuery id: b9678529-dcd8-478f-92eb-406487b29094\n\n┌─name─┐\n│ user │\n└──────┘\n\n1 rows in set. Elapsed: 0.009 sec.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="пример-на-python" tabindex="-1"><a class="header-anchor" href="#пример-на-python" aria-hidden="true">#</a> Пример на Python</h2>',11),C=(0,e.Uk)("Пример использования библиотеки "),T={href:"https://github.com/mymarilyn/clickhouse-driver",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("clickhouse-driver"),S=(0,e.Uk)(" ("),A={href:"https://clickhouse-driver.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},H=(0,e.Uk)("документация"),I=(0,e.Uk)("):"),O=(0,e.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> clickhouse_driver <span class="token keyword">import</span> Client\n\n<span class="token comment"># Создаем подключение к ClickHouse</span>\nclient <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">)</span>  <span class="token comment"># Замените &#39;localhost&#39; на адрес вашего сервера ClickHouse</span>\n\n<span class="token comment"># Создаем таблицу (если она еще не существует)</span>\nclient<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;\nCREATE TABLE IF NOT EXISTS test_table (\n    id UInt32,\n    name String,\n    age UInt8\n) ENGINE = MergeTree()\nORDER BY id\n&#39;&#39;&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># Добавляем данные в таблицу</span>\ndata <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;Charlie&#39;</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n\nclient<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO test_table (id, name, age) VALUES&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n\n<span class="token comment"># Выбираем данные из таблицы</span>\nresult <span class="token operator">=</span> client<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM test_table&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment"># Выводим результаты</span>\n<span class="token keyword">for</span> row <span class="token keyword">in</span> result<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>\n\n<span class="token comment"># Закрываем соединение (необязательно, так как клиент автоматически закрывает соединение при завершении работы)</span>\nclient<span class="token punctuation">.</span>disconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>Ввод программы:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>(1, &#39;Alice&#39;, 30)\n(2, &#39;Bob&#39;, 25)\n(3, &#39;Charlie&#39;, 35)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="ссылки" tabindex="-1"><a class="header-anchor" href="#ссылки" aria-hidden="true">#</a> Ссылки</h2>',4),R={href:"https://www.youtube.com/watch?v=PLMSA_gDdyM",target:"_blank",rel:"noopener noreferrer"},B=(0,e.Uk)("Что нужно знать об архитектуре ClickHouse / Алексей Зателепин (Яндекс)"),L={href:"https://www.youtube.com/watch?v=vbhSrZxm66E",target:"_blank",rel:"noopener noreferrer"},N=(0,e.Uk)("005. Как работает ClickHouse, лекция в ШАД"),W=(0,e.Uk)(" — детально про алгоритмы и способ хранения данных"),D={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",p,[r,(0,e.Uk)(" "+(0,l.zw)(n.$frontmatter.title),1)]),(0,e._)("p",null,[(0,e._)("a",t,[c,(0,e.Wm)(a)]),i,(0,e._)("a",u,[o,(0,e.Wm)(a)]),b]),m,k,(0,e._)("p",null,[d,(0,e._)("a",h,[g,(0,e.Wm)(a)]),v]),E,(0,e._)("p",null,[f,(0,e._)("a",x,[_,(0,e.Wm)(a)]),w]),U,(0,e._)("p",null,[C,(0,e._)("a",T,[y,(0,e.Wm)(a)]),S,(0,e._)("a",A,[H,(0,e.Wm)(a)]),I]),O,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",R,[B,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",L,[N,(0,e.Wm)(a)]),W])])],64)}}}}]);