"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[927],{58274:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-42d4b54e",path:"/%D1%81%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5-%D0%B8-%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5-%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D0%B8-%D0%B2.html",title:"Статические и динамические области видимости",lang:"ru-RU",frontmatter:{title:"Статические и динамические области видимости",date:"2020-02-11",categories:["Языки программирования"],tags:["перевод","области-видимости"]},excerpt:"",headers:[{level:2,title:"Статические области видимости",slug:"статические-области-видимости",children:[]},{level:2,title:"Динамические области видимости",slug:"динамические-области-видимости",children:[]},{level:2,title:"Статические vs динамические",slug:"статические-vs-динамические",children:[]}],filePathRelative:"статические-и-динамические-области-в.md",git:{updatedTime:1692859375e3}}},97071:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(66252),r=a(3577);const l={id:"frontmatter-title",tabindex:"-1"},p=(0,e._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),i=(0,e.Uk)("Перевод статьи "),b={href:"https://www.geeksforgeeks.org/static-and-dynamic-scoping/",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("Static and Dynamic Scoping"),u=(0,e.Uk)("."),t=(0,e.uE)('<p>Область видимости переменной <code>x</code> это область программы в которой использование имени <code>x</code> ссылается на объявление этой переменной. Одна из причин использование областей видимости — сохранить переменные в разных частях программы отличными друг от друга. Количество коротких имён для переменных ограничено и программисты используют общепринятые имена (например <code>i</code> для индекса массива). В любой программе среднего размера одинаковые названия переменных используются в разных частях программы.</p><p>Области видимости делятся на два вида: статические и динамические.</p><h2 id="статические-области-видимости" tabindex="-1"><a class="header-anchor" href="#статические-области-видимости" aria-hidden="true">#</a> Статические области видимости</h2><p>Статические области видимости (Static scoping) так же называются лексическими областями видимости (Lexical scoping). В этих областях видимости имена переменных всегда ссылаются на окружение более верхнего уровня. Это свойство текста программы и не связано со стеком вызовов во время выполнения. Статические области видимости упрощают написание модульного кода, так как программист вычисляет область видимости просто смотря на код. В отличии от этого, динамические области видимости требуют от разработчика учитывать все возможные варианты динамического контекста.</p><p>В большинстве языков программирования, включая C, C++ и Java, используются статические области видимости: привязка переменных может быть определена по тексту программы и не зависит от стека вызовов функций во время выполнения.</p><p>Для примера рассмотрим программу написанную ниже. Программа выводит 10, так как значение возвращаемое <code>f()</code> не зависит от того откуда вызвана функция (<code>g()</code> вызывает её и имеет свою переменную <code>x</code> со значением 20). <code>f()</code> всегда возвращает значение глобальной переменной <code>x</code>.</p><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>// программа на C демонстрирующая статические области видимости\n#include&lt;stdio.h&gt; \nint x = 10; \n\n// Вызывается из g() \nint f() \n{ \n   return x; \n} \n\n// g() содержит переменную с именем x и вызывает f() \nint g() \n{ \n   int x = 20; \n   return f(); \n} \n\nint main() \n{ \n  printf(&quot;%d&quot;, g()); // 10\n  printf(&quot;\\n&quot;); \n  return 0; \n} \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>В примере компилятор сначала ищет переменную в текущем блоке, затем в глобальных переменных.</p><h2 id="динамические-области-видимости" tabindex="-1"><a class="header-anchor" href="#динамические-области-видимости" aria-hidden="true">#</a> Динамические области видимости</h2><p>Динамическими области видимости необычны для современных языков программирования: каждый идентификатор имеет глобальный стек привязок и при поиске значения используется самая последняя привязка. Другими словами, сначала компилятор ищет имя в текущем блоке, а затем последовательно во всех вызвавших текущий блок функциях.</p><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>// Так как динамические области видимости необычны\n// мы рассмотрим следующий псевдокод. Он выведет 20 \n// на языке с динамическими областями видимости\n\nint x = 10; \n\n// Called by g() \nint f() \n{ \n   return x; \n} \n\n// g() содержит переменную с именем x и вызывает f()\nint g() \n{ \n   int x = 20; \n   return f(); \n} \n\nmain() \n{ \n  printf(g()); // 20\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="статические-vs-динамические" tabindex="-1"><a class="header-anchor" href="#статические-vs-динамические" aria-hidden="true">#</a> Статические vs динамические</h2><p>В большинстве языков программирования используются статические области видимости: код легче понимать, достаточно посмотреть на текст программы чтобы понять область видимости переменной.</p><p>При использовании динамических областей видимости недостаточно знать где написан код, нужно знать как он запускается. Каждый раз при запуске функции создаётся новая область видимости.</p><p>Perl поддерживает как статические так и динамические области видимости. Ключевое слово <code>my</code> определяет статическую область видимости локальной переменной, а ключевое слово <code>local</code> динамическую область видимости локальной переменной.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># Код на Perl демонстрирующий динамическую область видимости\n$x = 10; \nsub f  \n{  \n   return $x;  \n} \nsub g  \n{  \n   # Так как используется local, переменная x в динамической области видимости\n   local $x = 20;  \n\n   return f();  \n} \nprint g().&quot;\\n&quot;; # 20\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',16),d={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",l,[p,(0,e.Uk)(" "+(0,r.zw)(n.$frontmatter.title),1)]),(0,e._)("p",null,[i,(0,e._)("a",b,[c,(0,e.Wm)(a)]),u]),t],64)}}}}]);