"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[3829],{23715:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-57b4a1a8",path:"/%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-jsonpath-%D0%B2-python.html",title:"Примеры использования JSONPath в Python",lang:"ru-RU",frontmatter:{title:"Примеры использования JSONPath в Python",date:"2020-03-06",categories:["Python"],tags:["Python","перевод"]},excerpt:"",headers:[{level:2,title:"Что такое JSONPath?",slug:"что-такое-jsonpath",children:[]},{level:2,title:"Библиотеки Python для JSONPath",slug:"библиотеки-python-для-jsonpath",children:[]},{level:2,title:"Какую библиотеку использовать?",slug:"какую-библиотеку-использовать",children:[]},{level:2,title:"Разбор JSON",slug:"разбор-json",children:[]},{level:2,title:"Расписка списка",slug:"расписка-списка",children:[]},{level:2,title:"Заключение",slug:"заключение",children:[]}],filePathRelative:"примеры-использования-jsonpath-в-python.md",git:{updatedTime:1692859375e3}}},20858:(n,s,a)=>{a.r(s),a.d(s,{default:()=>F});var e=a(66252),p=a(3577);const t={id:"frontmatter-title",tabindex:"-1"},o=(0,e._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),l=(0,e.Uk)("Перевод статьи "),r={href:"https://www.journaldev.com/33265/python-jsonpath-examples",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("Python JSONPath Examples"),i=(0,e.Uk)("."),u=(0,e._)("h2",{id:"что-такое-jsonpath",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#что-такое-jsonpath","aria-hidden":"true"},"#"),(0,e.Uk)(" Что такое JSONPath?")],-1),k=(0,e._)("p",null,"JSONPath это язык запросов к JSON. Он очень похож на язык запросов XPath для XML. Вы формируете строку запроса и получаете нужное значение. Такое подход экономит память, так как необходимости разбазарить JSON полностью.",-1),d=(0,e._)("h2",{id:"библиотеки-python-для-jsonpath",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#библиотеки-python-для-jsonpath","aria-hidden":"true"},"#"),(0,e.Uk)(" Библиотеки Python для JSONPath")],-1),h=(0,e._)("p",null,"Существует много JSONPath-библиотек для Python.",-1),b={href:"https://pypi.org/project/jsonpath/",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("jsonpath"),g=(0,e.Uk)(": это портированая из Perl и JavaScript версия JSONPath."),y={href:"https://pypi.org/project/jsonpath-rw/",target:"_blank",rel:"noopener noreferrer"},j=(0,e.Uk)("jsonpath-rw"),v=(0,e.Uk)(": полностью Python-реализация JSONPath. Объект выражения JSONPath это объект первого класса, простой для анализа, преобразования, обработки, печати и расширения. Модуль "),_={href:"https://pypi.org/project/jsonpath-rw-ext/",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("jsonpath-rw-ext"),x=(0,e.Uk)(" расширяет функционал библиотеки."),P={href:"https://pypi.org/project/jsonpath-ng/",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("jsonpath-ng"),q=(0,e.Uk)(": окончательная реализация JSONPath цель которой соответствие стандарту, включая арифметические и бинарные сравнения. Эта библиотека соединяет модули "),S=(0,e._)("code",null,"jsonpath-rw",-1),D=(0,e.Uk)(" и "),J=(0,e._)("code",null,"jsonpath-rw-ext",-1),N=(0,e.Uk)(" и расширяет их."),O=(0,e.uE)('<h2 id="какую-библиотеку-использовать" tabindex="-1"><a class="header-anchor" href="#какую-библиотеку-использовать" aria-hidden="true">#</a> Какую библиотеку использовать?</h2><p>Модуль <code>jsonpath-ng</code> самый развитый и написан на чистом Python. Он поддерживает Python 2 и Python 3. Мы будем использовать этот модуль для примеров.</p><p>Установка модуля:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pip3.7 install jsonpath-ng\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="разбор-json" tabindex="-1"><a class="header-anchor" href="#разбор-json" aria-hidden="true">#</a> Разбор JSON</h2><p>Рассмотрим пример разбора JSON и получения значения требуемого атрибута.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> json\n\n<span class="token keyword">from</span> jsonpath_ng <span class="token keyword">import</span> jsonpath<span class="token punctuation">,</span> parse\n\njson_string <span class="token operator">=</span> <span class="token string">&#39;{&quot;id&quot;:1, &quot;name&quot;:&quot;Pankaj&quot;}&#39;</span>\njson_data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_string<span class="token punctuation">)</span>\n\njsonpath_expression <span class="token operator">=</span> parse<span class="token punctuation">(</span><span class="token string">&#39;$.id&#39;</span><span class="token punctuation">)</span>\n\nmatch <span class="token operator">=</span> jsonpath_expression<span class="token punctuation">.</span>find<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;id value is&quot;</span><span class="token punctuation">,</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Вывод программы:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[DatumInContext(value=1, path=Fields(&#39;id&#39;), context=DatumInContext(value={&#39;id&#39;: 1, &#39;name&#39;: &#39;Pankaj&#39;}, path=Root(), context=None))]\nid value is 1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Мы используем модуль <code>json</code> для преобразования строки JSON в словарь.</p><h2 id="расписка-списка" tabindex="-1"><a class="header-anchor" href="#расписка-списка" aria-hidden="true">#</a> Расписка списка</h2><p>Ключи JSON могут содержать списки значений. Мы можем использовать JSONPath для анализа списоков и получения значений.</p><p>Предположим, что у нас есть JSON-файл <code>db.json</code> с следующим содержимым:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;employees&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Pankaj&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;salary&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10000&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;David&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;salary&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5000&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Мы хотим разобрать этот JSON-файл и получить список идентификаторов сотрудников.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> json\n<span class="token keyword">from</span> jsonpath_ng <span class="token keyword">import</span> jsonpath<span class="token punctuation">,</span> parse\n\n<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;db.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> json_file<span class="token punctuation">:</span>\n    json_data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>json_file<span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>json_data<span class="token punctuation">)</span>\n\njsonpath_expression <span class="token operator">=</span> parse<span class="token punctuation">(</span><span class="token string">&#39;employees[*].id&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> match <span class="token keyword">in</span> jsonpath_expression<span class="token punctuation">.</span>find<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Employee id: </span><span class="token interpolation"><span class="token punctuation">{</span>match<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Вывод программы:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{&#39;employees&#39;: [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Pankaj&#39;, &#39;salary&#39;: &#39;10000&#39;}, {&#39;name&#39;: &#39;David&#39;, &#39;salary&#39;: &#39;5000&#39;, &#39;id&#39;: 2}]}\nEmployee id: 1\nEmployee id: 2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',18),U=(0,e.Uk)("Рекомендовано к чтению "),B={href:"https://www.journaldev.com/23592/python-f-strings-literal-string-interpolation",target:"_blank",rel:"noopener noreferrer"},E=(0,e.Uk)("Python f-strings – PEP 498 – Literal String Interpolation"),C=(0,e.Uk)("."),W=(0,e.uE)('<p>Для получения данных в виде списка используйте генератор списков:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>emp_ids_list <span class="token operator">=</span> <span class="token punctuation">[</span>match<span class="token punctuation">.</span>value <span class="token keyword">for</span> match <span class="token keyword">in</span> jsonpath_expression<span class="token punctuation">.</span>find<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>emp_ids_list<span class="token punctuation">)</span>  <span class="token comment"># [1, 2]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="заключение" tabindex="-1"><a class="header-anchor" href="#заключение" aria-hidden="true">#</a> Заключение</h2><p>JSONPath предоставляет простой способ разбора JSON и извлечения конкретных значений. Это очень полезно когда данных в JSON много, а нам интересны только некоторые значения.</p>',4),F={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",t,[o,(0,e.Uk)(" "+(0,p.zw)(n.$frontmatter.title),1)]),(0,e._)("p",null,[l,(0,e._)("a",r,[c,(0,e.Wm)(a)]),i]),u,k,d,h,(0,e._)("p",null,[(0,e._)("a",b,[m,(0,e.Wm)(a)]),g]),(0,e._)("p",null,[(0,e._)("a",y,[j,(0,e.Wm)(a)]),v,(0,e._)("a",_,[f,(0,e.Wm)(a)]),x]),(0,e._)("p",null,[(0,e._)("a",P,[w,(0,e.Wm)(a)]),q,S,D,J,N]),O,(0,e._)("p",null,[U,(0,e._)("a",B,[E,(0,e.Wm)(a)]),C]),W],64)}}}}]);