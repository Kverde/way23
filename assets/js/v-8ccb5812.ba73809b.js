"use strict";(self.webpackChunkway23=self.webpackChunkway23||[]).push([[1090],{100:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-8ccb5812",path:"/%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC-%D0%B3%D0%B5%D0%BD%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8-%D0%B2%D1%81%D0%B5%D1%85-%D0%BF%D0%BE%D0%B4%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2.html",title:"Алгоритм генерации всех подмножеств",lang:"ru-RU",frontmatter:{title:"Алгоритм генерации всех подмножеств",date:"2019-09-15",categories:["Книги","Алгоритмы"],tags:["Python","множества"]},excerpt:"",headers:[],filePathRelative:"алгоритм-генерации-всех-подмножеств.md",git:{updatedTime:1692859375e3}}},46311:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var e=a(66252),p=a(3577);const t={id:"frontmatter-title",tabindex:"-1"},l=(0,e._)("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),c=(0,e.uE)('<p>Алгоритм взят из книги «Теоретический минимум по Computer Science». Алгоритм итеративный и очень простой для понимания.</p><p>На изображении пример работы алгоритма для множества <code>[1, 2, 3]</code>.</p><p><img src="images/power_set.png" alt="Генерация всех подмножеств"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>результат = множество содержащие в себе пустое множество\nДля каждого элемента x из исходного множества \n  копия_результата = копировать результат\n\n  # в каждый элемент копии добавляем элемент исходного множества\n  Для каждого элемента y из копия_результата\n    y = y + x\n\n  # Объединяем результат и копию\n  результат = результат + копия_результата \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Каждый элемент исходного множества увеличивает результирующее множества в 2 раза. В итоге множество всех подмножеств будет содержать [latex]2^n[/latex] элементов, где n — количество элементов исходного множества.</p><p>Пример на Python:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> copy\n\nmain_set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>main_set<span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">get_subsets</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">for</span> main_element <span class="token keyword">in</span> main<span class="token punctuation">:</span>\n        new_set <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n        <span class="token keyword">for</span> item <span class="token keyword">in</span> new_set<span class="token punctuation">:</span>\n            item<span class="token punctuation">.</span>append<span class="token punctuation">(</span>main_element<span class="token punctuation">)</span>\n        result <span class="token operator">+=</span> new_set\n\n    <span class="token keyword">return</span> result\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>get_subsets<span class="token punctuation">(</span>main_set<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',7),r={render:function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",t,[l,(0,e.Uk)(" "+(0,p.zw)(n.$frontmatter.title),1)]),c],64)}}}}]);